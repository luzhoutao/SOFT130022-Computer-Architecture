@comment abort
@item void abort (void)

@file{stdlib.h} (ANSI):  @ref{Aborting a Program}.

@comment abs
@item int abs (int @var{number})

@file{stdlib.h} (ANSI):  @ref{Absolute Value}.

@comment accept
@item int accept (int @var{socket}, struct sockaddr *@var{addr}, size_t *@var{length-ptr})

@file{sys/socket.h} (BSD):  @ref{Accepting Connections}.

@comment access
@item int access (const char *@var{filename}, int @var{how})

@file{unistd.h} (POSIX.1):  @ref{Testing File Access}.

@comment acosh
@item double acosh (double @var{x})

@file{math.h} (BSD):  @ref{Hyperbolic Functions}.

@comment acos
@item double acos (double @var{x})

@file{math.h} (ANSI):  @ref{Inverse Trig Functions}.

@comment adjtime
@item int adjtime (const struct timeval *@var{delta}, struct timeval *@var{olddelta})

@file{sys/time.h} (BSD):  @ref{High-Resolution Calendar}.

@comment AF_FILE
@item AF_FILE

@file{sys/socket.h} (GNU):  @ref{Address Formats}.

@comment AF_INET
@item AF_INET

@file{sys/socket.h} (BSD):  @ref{Address Formats}.

@comment AF_UNIX
@item AF_UNIX

@file{sys/socket.h} (BSD):  @ref{Address Formats}.

@comment AF_UNSPEC
@item AF_UNSPEC

@file{sys/socket.h} (BSD):  @ref{Address Formats}.

@comment alarm
@item unsigned int alarm (unsigned int @var{seconds})

@file{unistd.h} (POSIX.1):  @ref{Setting an Alarm}.

@comment alloca
@item void * alloca (size_t @var{size});

@file{stdlib.h} (GNU, BSD):  @ref{Variable Size Automatic}.

@comment ALTWERASE
@item tcflag_t ALTWERASE

@file{termios.h} (BSD):  @ref{Local Modes}.

@comment ARG_MAX
@item int ARG_MAX

@file{limits.h} (POSIX.1):  @ref{General Limits}.

@comment asctime
@item char * asctime (const struct tm *@var{brokentime})

@file{time.h} (ANSI):  @ref{Formatting Date and Time}.

@comment asinh
@item double asinh (double @var{x})

@file{math.h} (BSD):  @ref{Hyperbolic Functions}.

@comment asin
@item double asin (double @var{x})

@file{math.h} (ANSI):  @ref{Inverse Trig Functions}.

@comment asprintf
@item int asprintf (char **@var{ptr}, const char *@var{template}, @dots{})

@file{stdio.h} (GNU):  @ref{Dynamic Output}.

@comment assert
@item void assert (int @var{expression})

@file{assert.h} (ANSI):  @ref{Consistency Checking}.

@comment atan2
@item double atan2 (double @var{y}, double @var{x})

@file{math.h} (ANSI):  @ref{Inverse Trig Functions}.

@comment atanh
@item double atanh (double @var{x})

@file{math.h} (BSD):  @ref{Hyperbolic Functions}.

@comment atan
@item double atan (double @var{x})

@file{math.h} (ANSI):  @ref{Inverse Trig Functions}.

@comment atexit
@item int atexit (void (*@var{function}) (void))

@file{stdlib.h} (ANSI):  @ref{Cleanups on Exit}.

@comment atof
@item double atof (const char *@var{string})

@file{stdlib.h} (ANSI):  @ref{Parsing of Floats}.

@comment atoi
@item int atoi (const char *@var{string})

@file{stdlib.h} (ANSI):  @ref{Parsing of Integers}.

@comment atol
@item long int atol (const char *@var{string})

@file{stdlib.h} (ANSI):  @ref{Parsing of Integers}.

@comment B0
@item B0

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B110
@item B110

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B1200
@item B1200

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B134
@item B134

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B150
@item B150

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B1800
@item B1800

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B19200
@item B19200

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B200
@item B200

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B2400
@item B2400

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B300
@item B300

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B38400
@item B38400

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B4800
@item B4800

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B50
@item B50

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B600
@item B600

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B75
@item B75

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment B9600
@item B9600

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment BC_BASE_MAX
@item int BC_BASE_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment BC_DIM_MAX
@item int BC_DIM_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment BC_DIM_MAX
@item int BC_DIM_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment bcmp
@item int bcmp (const void *@var{a1}, const void *@var{a2}, size_t @var{size})

@file{string.h} (BSD):  @ref{String/Array Comparison,}.

@comment bcopy
@item void * bcopy (void *@var{from}, const void *@var{to}, size_t @var{size})

@file{string.h} (BSD):  @ref{Copying and Concatenation,}.

@comment BC_SCALE_MAX
@item int BC_SCALE_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment BC_STRING_MAX
@item int BC_STRING_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment bind
@item int bind (int @var{socket}, struct sockaddr *@var{addr}, size_t @var{length})

@file{sys/socket.h} (BSD):  @ref{Setting Address}.

@comment BRKINT
@item tcflag_t BRKINT

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment _BSD_SOURCE
@item _BSD_SOURCE

(GNU):  @ref{Feature Test Macros}.

@comment bsearch
@item void * bsearch (const void *@var{key}, const void *@var{array}, size_t @var{count}, size_t @var{size}, comparison_fn_t @var{compare})

@file{stdlib.h} (ANSI):  @ref{Array Search Function,}.

@comment BUFSIZ
@item int BUFSIZ

@file{stdio.h} (ANSI):  @ref{Controlling Buffering}.

@comment bzero
@item void * bzero (void *@var{block}, size_t @var{size})

@file{string.h} (BSD):  @ref{Copying and Concatenation,}.

@comment cabs
@item double cabs (struct @{ double real, imag; @} @var{z})

@file{math.h} (BSD):  @ref{Absolute Value}.

@comment calloc
@item void * calloc (size_t @var{count}, size_t @var{eltsize})

@file{malloc.h}, @file{stdlib.h} (ANSI):  @ref{Allocating Cleared Space}.

@comment cbrt
@item double cbrt (double @var{x})

@file{math.h} (BSD):  @ref{Exponents and Logarithms}.

@comment cc_t
@item cc_t

@file{termios.h} (POSIX.1):  @ref{Mode Data Types}.

@comment CCTS_OFLOW
@item tcflag_t CCTS_OFLOW

@file{termios.h} (BSD):  @ref{Control Modes}.

@comment ceil
@item double ceil (double @var{x})

@file{math.h} (ANSI):  @ref{Rounding and Remainders}.

@comment cfgetispeed
@item speed_t cfgetispeed (const struct termios *@var{termios-p})

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment cfgetospeed
@item speed_t cfgetospeed (const struct termios *@var{termios-p})

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment cfmakeraw
@item int cfmakeraw (struct termios *@var{termios-p})

@file{termios.h} (BSD):  @ref{Noncanonical Input}.

@comment cfree
@item void cfree (void *@var{ptr})

@file{stdlib.h} (Sun):  @ref{Freeing after Malloc}.

@comment cfsetispeed
@item int cfsetispeed (struct termios *@var{termios-p}, speed_t @var{speed})

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment cfsetospeed
@item int cfsetospeed (struct termios *@var{termios-p}, speed_t @var{speed})

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment cfsetspeed
@item int cfsetspeed (struct termios *@var{termios-p}, speed_t @var{speed})

@file{termios.h} (BSD):  @ref{Line Speed}.

@comment CHAR_BIT
@item CHAR_BIT

@file{limits.h} (ANSI):  @ref{Width of Type}.

@comment CHAR_MAX
@item CHAR_MAX

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment CHAR_MIN
@item CHAR_MIN

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment chdir
@item int chdir (const char *@var{filename})

@file{unistd.h} (POSIX.1):  @ref{Working Directory}.

@comment CHILD_MAX
@item int CHILD_MAX

@file{limits.h} (POSIX.1):  @ref{General Limits}.

@comment chmod
@item int chmod (const char *@var{filename}, mode_t @var{mode})

@file{sys/stat.h} (POSIX.1):  @ref{Setting Permissions}.

@comment chown
@item int chown (const char *@var{filename}, uid_t @var{owner}, gid_t @var{group})

@file{unistd.h} (POSIX.1):  @ref{File Owner}.

@comment CIGNORE
@item tcflag_t CIGNORE

@file{termios.h} (BSD):  @ref{Control Modes}.

@comment clearerr
@item void clearerr (FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{EOF and Errors}.

@comment CLK_TCK
@item int CLK_TCK

@file{time.h} (POSIX.1):  @ref{Basic CPU Time}.

@comment CLOCAL
@item tcflag_t CLOCAL

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment clock
@item clock_t clock (void)

@file{time.h} (ANSI):  @ref{Basic CPU Time}.

@comment CLOCKS_PER_SEC
@item int CLOCKS_PER_SEC

@file{time.h} (ANSI):  @ref{Basic CPU Time}.

@comment clock_t
@item clock_t

@file{time.h} (ANSI):  @ref{Basic CPU Time}.

@comment closedir
@item int closedir (DIR *@var{dirstream})

@file{dirent.h} (POSIX.1):  @ref{Reading/Closing Directory}.

@comment close
@item int close (int @var{filedes})

@file{unistd.h} (POSIX.1):  @ref{Opening and Closing Files}.

@comment COLL_WEIGHTS_MAX
@item int COLL_WEIGHTS_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment confstr
@item size_t confstr (int @var{parameter}, char *@var{buf}, size_t @var{len})

@file{unistd.h} (POSIX.2):  @ref{String Parameters}.

@comment connect
@item int connect (int @var{socket}, struct sockaddr *@var{addr}, size_t @var{length})

@file{sys/socket.h} (BSD):  @ref{Connecting}.

@comment cookie_close_function
@item cookie_close_function

@file{stdio.h} (GNU):  @ref{Hook Functions}.

@comment cookie_io_functions_t
@item cookie_io_functions_t

@file{stdio.h} (GNU):  @ref{Streams and Cookies}.

@comment cookie_read_function
@item cookie_read_function

@file{stdio.h} (GNU):  @ref{Hook Functions}.

@comment cookie_seek_function
@item cookie_seek_function

@file{stdio.h} (GNU):  @ref{Hook Functions}.

@comment cookie_write_function
@item cookie_write_function

@file{stdio.h} (GNU):  @ref{Hook Functions}.

@comment copysign
@item double copysign (double @var{value}, double @var{sign})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment cosh
@item double cosh (double @var{x})

@file{math.h} (ANSI):  @ref{Hyperbolic Functions}.

@comment cos
@item double cos (double @var{x})

@file{math.h} (ANSI):  @ref{Trig Functions}.

@comment CREAD
@item tcflag_t CREAD

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment creat
@item int creat (const char *@var{filename}, mode_t @var{mode})

@file{fcntl.h} (POSIX.1):  @ref{Opening and Closing Files}.

@comment CRTS_IFLOW
@item tcflag_t CRTS_IFLOW

@file{termios.h} (BSD):  @ref{Control Modes}.

@comment CS5
@item tcflag_t CS5

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment CS6
@item tcflag_t CS6

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment CS7
@item tcflag_t CS7

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment CS8
@item tcflag_t CS8

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment CSIZE
@item tcflag_t CSIZE

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment _CS_PATH
@item _CS_PATH

@file{unistd.h} (POSIX.2):  @ref{String Parameters}.

@comment CSTOPB
@item tcflag_t CSTOPB

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment ctermid
@item char * ctermid (char *@var{string})

@file{stdio.h} (POSIX.1):  @ref{Identifying the Terminal,}.

@comment ctime
@item char * ctime (const time_t *@var{time})

@file{time.h} (ANSI):  @ref{Formatting Date and Time}.

@comment cuserid
@item char * cuserid (char *@var{string})

@file{stdio.h} (POSIX.1):  @ref{Who Logged In}.

@comment daylight
@item int daylight

@file{time.h} (SVID):  @ref{Time Zone Functions}.

@comment DBL_DIG
@item DBL_DIG

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment DBL_EPSILON
@item DBL_EPSILON

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment DBL_MANT_DIG
@item DBL_MANT_DIG

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment DBL_MAX_10_EXP
@item DBL_MAX_10_EXP

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment DBL_MAX_EXP
@item DBL_MAX_EXP

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment DBL_MAX
@item DBL_MAX

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment DBL_MIN_10_EXP
@item DBL_MIN_10_EXP

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment DBL_MIN_EXP
@item DBL_MIN_EXP

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment DBL_MIN
@item DBL_MIN

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment dev_t
@item dev_t

@file{sys/types.h} (POSIX.1):  @ref{Attribute Meanings}.

@comment difftime
@item double difftime (time_t @var{time1}, time_t @var{time0})

@file{time.h} (ANSI):  @ref{Simple Calendar Time}.

@comment DIR
@item DIR

@file{dirent.h} (POSIX.1):  @ref{Opening a Directory}.

@comment div
@item div_t div (int @var{numerator}, int @var{denominator})

@file{stdlib.h} (ANSI):  @ref{Integer Division}.

@comment div_t
@item div_t

@file{stdlib.h} (ANSI):  @ref{Integer Division}.

@c DO NOT EDIT THIS FILE!
@comment drem
@item double drem (double @var{numerator}, double @var{denominator})

@file{math.h} (BSD):  @ref{Rounding and Remainders}.

@comment dup2
@item int dup2 (int @var{old}, int @var{new})

@file{unistd.h} (POSIX.1):  @ref{Duplicating Descriptors}.

@comment dup
@item int dup (int @var{old})

@file{unistd.h} (POSIX.1):  @ref{Duplicating Descriptors}.

@comment E2BIG
@item int E2BIG

@file{errno.h} (POSIX.1: Argument list too long):  @ref{Error Codes,}.

@comment EACCES
@item int EACCES

@file{errno.h} (POSIX.1: Permission denied):  @ref{Error Codes,}.

@comment EADDRINUSE
@item int EADDRINUSE

@file{errno.h} (BSD: Address already in use):  @ref{Error Codes,}.

@comment EADDRNOTAVAIL
@item int EADDRNOTAVAIL

@file{errno.h} (BSD: Can't assign requested address):  @ref{Error Codes,}.

@comment EAFNOSUPPORT
@item int EAFNOSUPPORT

@file{errno.h} (BSD: Address family not supported by protocol family):  @ref{Error Codes,}.

@comment EAGAIN
@item int EAGAIN

@file{errno.h} (POSIX.1: Resource temporarily unavailable):  @ref{Error Codes,}.

@comment EALREADY
@item int EALREADY

@file{errno.h} (BSD: Operation already in progress):  @ref{Error Codes,}.

@comment EAUTH
@item int EAUTH

@file{errno.h} (BSD: Authentication error):  @ref{Error Codes,}.

@comment EBACKGROUND
@item int EBACKGROUND

@file{errno.h} (GNU: Inappropriate operation for background process):  @ref{Error Codes,}.

@comment EBADF
@item int EBADF

@file{errno.h} (POSIX.1: Bad file descriptor):  @ref{Error Codes,}.

@comment EBADRPC
@item int EBADRPC

@file{errno.h} (BSD: RPC struct is bad):  @ref{Error Codes,}.

@comment EBUSY
@item int EBUSY

@file{errno.h} (POSIX.1: Device busy):  @ref{Error Codes,}.

@comment ECHILD
@item int ECHILD

@file{errno.h} (POSIX.1: No child processes):  @ref{Error Codes,}.

@comment ECHOCTL
@item tcflag_t ECHOCTL

@file{termios.h} (BSD):  @ref{Local Modes}.

@comment ECHOE
@item tcflag_t ECHOE

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment ECHO
@item tcflag_t ECHO

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment ECHOKE
@item tcflag_t ECHOKE

@file{termios.h} (BSD):  @ref{Local Modes}.

@comment ECHOK
@item tcflag_t ECHOK

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment ECHONL
@item tcflag_t ECHONL

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment ECHOPRT
@item tcflag_t ECHOPRT

@file{termios.h} (BSD):  @ref{Local Modes}.

@comment ECONNABORTED
@item int ECONNABORTED

@file{errno.h} (BSD: Software caused connection abort):  @ref{Error Codes,}.

@comment ECONNREFUSED
@item int ECONNREFUSED

@file{errno.h} (BSD: Connection refused):  @ref{Error Codes,}.

@comment ECONNRESET
@item int ECONNRESET

@file{errno.h} (BSD: Connection reset by peer):  @ref{Error Codes,}.

@comment EDEADLK
@item int EDEADLK

@file{errno.h} (POSIX.1: Resource deadlock avoided):  @ref{Error Codes,}.

@comment EDESTADDRREQ
@item int EDESTADDRREQ

@file{errno.h} (BSD: Destination address required):  @ref{Error Codes,}.

@comment EDIED
@item int EDIED

@file{errno.h} (GNU: Translator died):  @ref{Error Codes,}.

@comment ED
@item int ED

@file{errno.h} (GNU: ?):  @ref{Error Codes,}.

@comment EDOM
@item int EDOM

@file{errno.h} (ANSI: Numerical argument out of domain):  @ref{Error Codes,}.

@comment EDQUOT
@item int EDQUOT

@file{errno.h} (BSD: Disc quota exceeded):  @ref{Error Codes,}.

@comment EEXIST
@item int EEXIST

@file{errno.h} (POSIX.1: File exists):  @ref{Error Codes,}.

@comment EFAULT
@item int EFAULT

@file{errno.h} (POSIX.1: Bad address):  @ref{Error Codes,}.

@comment EFBIG
@item int EFBIG

@file{errno.h} (POSIX.1: File too large):  @ref{Error Codes,}.

@comment EFTYPE
@item int EFTYPE

@file{errno.h} (BSD: Inappropriate file type or format):  @ref{Error Codes,}.

@comment EGRATUITOUS
@item int EGRATUITOUS

@file{errno.h} (GNU: Gratuitous error):  @ref{Error Codes,}.

@comment EGREGIOUS
@item int EGREGIOUS

@file{errno.h} (GNU: You really blew it this time):  @ref{Error Codes,}.

@comment EHOSTDOWN
@item int EHOSTDOWN

@file{errno.h} (BSD: Host is down):  @ref{Error Codes,}.

@comment EHOSTUNREACH
@item int EHOSTUNREACH

@file{errno.h} (BSD: No route to host):  @ref{Error Codes,}.

@comment EIEIO
@item int EIEIO

@file{errno.h} (GNU: Computer bought the farm):  @ref{Error Codes,}.

@comment EINPROGRESS
@item int EINPROGRESS

@file{errno.h} (BSD: Operation now in progress):  @ref{Error Codes,}.

@comment EINTR
@item int EINTR

@file{errno.h} (POSIX.1: Interrupted system call):  @ref{Error Codes,}.

@comment EINVAL
@item int EINVAL

@file{errno.h} (POSIX.1: Invalid argument):  @ref{Error Codes,}.

@comment EIO
@item int EIO

@file{errno.h} (POSIX.1: Input/output error):  @ref{Error Codes,}.

@comment EISCONN
@item int EISCONN

@file{errno.h} (BSD: Socket is already connected):  @ref{Error Codes,}.

@comment EISDIR
@item int EISDIR

@file{errno.h} (POSIX.1: Is a directory):  @ref{Error Codes,}.

@comment ELOOP
@item int ELOOP

@file{errno.h} (BSD: Too many levels of symbolic links):  @ref{Error Codes,}.

@comment EMFILE
@item int EMFILE

@file{errno.h} (POSIX.1: Too many open files):  @ref{Error Codes,}.

@comment EMLINK
@item int EMLINK

@file{errno.h} (POSIX.1: Too many links):  @ref{Error Codes,}.

@comment EMSGSIZE
@item int EMSGSIZE

@file{errno.h} (BSD: Message too long):  @ref{Error Codes,}.

@comment ENAMETOOLONG
@item int ENAMETOOLONG

@file{errno.h} (POSIX.1: File name too long):  @ref{Error Codes,}.

@comment endgrent
@item void endgrent (void)

@file{grp.h} (SVID, BSD):  @ref{Scanning All Groups}.

@comment endhostent
@item void endhostent ()

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment endnetent
@item void endnetent (void)

@file{netdb.h} (BSD):  @ref{Networks Database}.

@comment endprotoent
@item void endprotoent (void)

@file{netdb.h} (BSD):  @ref{Protocols Database}.

@comment endpwent
@item void endpwent (void)

@file{pwd.h} (SVID, BSD):  @ref{Scanning All Users}.

@comment endservent
@item void endservent (void)

@file{netdb.h} (BSD):  @ref{Services Database}.

@comment ENEEDAUTH
@item int ENEEDAUTH

@file{errno.h} (BSD: Need authenticator):  @ref{Error Codes,}.

@comment ENETDOWN
@item int ENETDOWN

@file{errno.h} (BSD: Network is down):  @ref{Error Codes,}.

@comment ENETRESET
@item int ENETRESET

@file{errno.h} (BSD: Network dropped connection on reset):  @ref{Error Codes,}.

@comment ENETUNREACH
@item int ENETUNREACH

@file{errno.h} (BSD: Network is unreachable):  @ref{Error Codes,}.

@comment ENFILE
@item int ENFILE

@file{errno.h} (POSIX.1: Too many open files in system):  @ref{Error Codes,}.

@comment ENOBUFS
@item int ENOBUFS

@file{errno.h} (BSD: No buffer space available):  @ref{Error Codes,}.

@comment ENODEV
@item int ENODEV

@file{errno.h} (POSIX.1: Operation not supported by device):  @ref{Error Codes,}.

@comment ENOENT
@item int ENOENT

@file{errno.h} (POSIX.1: No such file or directory):  @ref{Error Codes,}.

@comment ENOEXEC
@item int ENOEXEC

@file{errno.h} (POSIX.1: Exec format error):  @ref{Error Codes,}.

@comment ENOLCK
@item int ENOLCK

@file{errno.h} (POSIX.1: No locks available):  @ref{Error Codes,}.

@comment ENOMEM
@item int ENOMEM

@file{errno.h} (POSIX.1: Cannot allocate memory):  @ref{Error Codes,}.

@comment ENOPROTOOPT
@item int ENOPROTOOPT

@file{errno.h} (BSD: Protocol not available):  @ref{Error Codes,}.

@comment ENOSPC
@item int ENOSPC

@file{errno.h} (POSIX.1: No space left on device):  @ref{Error Codes,}.

@comment ENOSYS
@item int ENOSYS

@file{errno.h} (POSIX.1: Function not implemented):  @ref{Error Codes,}.

@comment ENOTBLK
@item int ENOTBLK

@file{errno.h} (BSD: Block device required):  @ref{Error Codes,}.

@comment ENOTCONN
@item int ENOTCONN

@file{errno.h} (BSD: Socket is not connected):  @ref{Error Codes,}.

@comment ENOTDIR
@item int ENOTDIR

@file{errno.h} (POSIX.1: Not a directory):  @ref{Error Codes,}.

@comment ENOTEMPTY
@item int ENOTEMPTY

@file{errno.h} (POSIX.1: Directory not empty):  @ref{Error Codes,}.

@comment ENOTSOCK
@item int ENOTSOCK

@file{errno.h} (BSD: Socket operation on non-socket):  @ref{Error Codes,}.

@comment ENOTTY
@item int ENOTTY

@file{errno.h} (POSIX.1: Inappropriate ioctl for device):  @ref{Error Codes,}.

@comment environ
@item char ** environ

@file{unistd.h} (POSIX.1):  @ref{Environment Access}.

@comment ENXIO
@item int ENXIO

@file{errno.h} (POSIX.1: Device not configured):  @ref{Error Codes,}.

@comment EOF
@item int EOF

@file{stdio.h} (ANSI):  @ref{EOF and Errors}.

@comment EOPNOTSUPP
@item int EOPNOTSUPP

@file{errno.h} (BSD: Operation not supported):  @ref{Error Codes,}.

@comment EPERM
@item int EPERM

@file{errno.h} (POSIX.1: Operation not permitted):  @ref{Error Codes,}.

@comment EPFNOSUPPORT
@item int EPFNOSUPPORT

@file{errno.h} (BSD: Protocol family not supported):  @ref{Error Codes,}.

@comment EPIPE
@item int EPIPE

@file{errno.h} (POSIX.1: Broken pipe):  @ref{Error Codes,}.

@comment EPROCLIM
@item int EPROCLIM

@file{errno.h} (BSD: Too many processes):  @ref{Error Codes,}.

@comment EPROCUNAVAIL
@item int EPROCUNAVAIL

@file{errno.h} (BSD: RPC bad procedure for program):  @ref{Error Codes,}.

@comment EPROGMISMATCH
@item int EPROGMISMATCH

@file{errno.h} (BSD: RPC program version wrong):  @ref{Error Codes,}.

@comment EPROGUNAVAIL
@item int EPROGUNAVAIL

@file{errno.h} (BSD: RPC program not available):  @ref{Error Codes,}.

@comment EPROTONOSUPPORT
@item int EPROTONOSUPPORT

@file{errno.h} (BSD: Protocol not supported):  @ref{Error Codes,}.

@comment EPROTOTYPE
@item int EPROTOTYPE

@file{errno.h} (BSD: Protocol wrong type for socket):  @ref{Error Codes,}.

@comment EQUIV_CLASS_MAX
@item int EQUIV_CLASS_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment ERANGE
@item int ERANGE

@file{errno.h} (ANSI: Numerical result out of range):  @ref{Error Codes,}.

@comment EREMOTE
@item int EREMOTE

@file{errno.h} (BSD: Too many levels of remote in path):  @ref{Error Codes,}.

@comment EROFS
@item int EROFS

@file{errno.h} (POSIX.1: Read-only file system):  @ref{Error Codes,}.

@comment ERPCMISMATCH
@item int ERPCMISMATCH

@file{errno.h} (BSD: RPC version wrong):  @ref{Error Codes,}.

@comment errno
@item volatile int errno

@file{errno.h} (ANSI):  @ref{Checking for Errors,}.

@comment ESHUTDOWN
@item int ESHUTDOWN

@file{errno.h} (BSD: Can't send after socket shutdown):  @ref{Error Codes,}.

@comment ESOCKTNOSUPPORT
@item int ESOCKTNOSUPPORT

@file{errno.h} (BSD: Socket type not supported):  @ref{Error Codes,}.

@comment ESPIPE
@item int ESPIPE

@file{errno.h} (POSIX.1: Illegal seek):  @ref{Error Codes,}.

@comment ESRCH
@item int ESRCH

@file{errno.h} (POSIX.1: No such process):  @ref{Error Codes,}.

@comment ESTALE
@item int ESTALE

@file{errno.h} (BSD: Stale NFS file handle):  @ref{Error Codes,}.

@comment ETIMEDOUT
@item int ETIMEDOUT

@file{errno.h} (BSD: Connection timed out):  @ref{Error Codes,}.

@comment ETOOMANYREFS
@item int ETOOMANYREFS

@file{errno.h} (BSD: Too many references: can't splice):  @ref{Error Codes,}.

@comment ETXTBSY
@item int ETXTBSY

@file{errno.h} (BSD: Text file busy):  @ref{Error Codes,}.

@comment EUSERS
@item int EUSERS

@file{errno.h} (BSD: Too many users):  @ref{Error Codes,}.

@comment EWOULDBLOCK
@item int EWOULDBLOCK

@file{errno.h} (BSD: Operation would block):  @ref{Error Codes,}.

@comment EXDEV
@item int EXDEV

@file{errno.h} (POSIX.1: Invalid cross-device link):  @ref{Error Codes,}.

@comment execle
@item int execle (const char *@var{filename}, const char *@var{arg0}, char *const @var{env}@t{[]}, @dots{})

@file{unistd.h} (POSIX.1):  @ref{Executing a File}.

@comment execl
@item int execl (const char *@var{filename}, const char *@var{arg0}, @dots{})

@file{unistd.h} (POSIX.1):  @ref{Executing a File}.

@comment execlp
@item int execlp (const char *@var{filename}, const char *@var{arg0}, @dots{})

@file{unistd.h} (POSIX.1):  @ref{Executing a File}.

@comment execve
@item int execve (const char *@var{filename}, char *const @var{argv}@t{[]}, char *const @var{env}@t{[]})

@file{unistd.h} (POSIX.1):  @ref{Executing a File}.

@comment execv
@item int execv (const char *@var{filename}, char *const @var{argv}@t{[]})

@file{unistd.h} (POSIX.1):  @ref{Executing a File}.

@comment execvp
@item int execvp (const char *@var{filename}, char *const @var{argv}@t{[]})

@file{unistd.h} (POSIX.1):  @ref{Executing a File}.

@comment EXIT_FAILURE
@item int EXIT_FAILURE

@file{stdlib.h} (ANSI):  @ref{Exit Status}.

@comment exit
@item void exit (int @var{status})

@file{stdlib.h} (ANSI):  @ref{Normal Termination}.

@comment _exit
@item void _exit (int @var{status})

@file{unistd.h} (POSIX.1):  @ref{Termination Internals}.

@comment EXIT_SUCCESS
@item int EXIT_SUCCESS

@file{stdlib.h} (ANSI):  @ref{Exit Status}.

@comment exp
@item double exp (double @var{x})

@file{math.h} (ANSI):  @ref{Exponents and Logarithms}.

@comment expm1
@item double expm1 (double @var{x})

@file{math.h} (BSD):  @ref{Exponents and Logarithms}.

@comment EXPR_NEST_MAX
@item int EXPR_NEST_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment fabs
@item double fabs (double @var{number})

@file{math.h} (ANSI):  @ref{Absolute Value}.

@comment fchmod
@item int fchmod (int @var{filedes}, int @var{mode})

@file{sys/stat.h} (BSD):  @ref{Setting Permissions}.

@comment fchown
@item int fchown (int @var{filedes}, int @var{owner}, int @var{group})

@file{unistd.h} (BSD):  @ref{File Owner}.

@comment fclean
@item int fclean (FILE *@var{stream})

@file{stdio.h} (GNU):  @ref{Cleaning Streams}.

@comment fclose
@item int fclose (FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{Closing Streams}.

@comment fcntl
@item int fcntl (int @var{filedes}, int @var{command}, @dots{})

@file{fcntl.h} (POSIX.1):  @ref{Control Operations}.

@comment FD_CLOEXEC
@item int FD_CLOEXEC

@file{fcntl.h} (POSIX.1):  @ref{Descriptor Flags}.

@comment FD_CLR
@item void FD_CLR (int @var{filedes}, fd_set *@var{set})

@file{sys/types.h} (BSD):  @ref{Waiting for I/O}.

@comment FD_ISSET
@item int FD_ISSET (int @var{filedes}, fd_set *@var{set})

@file{sys/types.h} (BSD):  @ref{Waiting for I/O}.

@comment fdopen
@item FILE * fdopen (int @var{filedes}, const char *@var{opentype})

@file{stdio.h} (POSIX.1):  @ref{Descriptors and Streams}.

@comment FD_SET
@item void FD_SET (int @var{filedes}, fd_set *@var{set})

@file{sys/types.h} (BSD):  @ref{Waiting for I/O}.

@comment fd_set
@item fd_set

@file{sys/types.h} (BSD):  @ref{Waiting for I/O}.

@comment FD_SETSIZE
@item int FD_SETSIZE

@file{sys/types.h} (BSD):  @ref{Waiting for I/O}.

@comment F_DUPFD
@item int F_DUPFD

@file{fcntl.h} (POSIX.1):  @ref{Duplicating Descriptors}.

@comment FD_ZERO
@item void FD_ZERO (fd_set *@var{set})

@file{sys/types.h} (BSD):  @ref{Waiting for I/O}.

@comment feof
@item int feof (FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{EOF and Errors}.

@comment ferror
@item int ferror (FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{EOF and Errors}.

@comment fflush
@item int fflush (FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{Flushing Buffers}.

@comment fgetc
@item int fgetc (FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{Character Input}.

@comment F_GETFD
@item int F_GETFD

@file{fcntl.h} (POSIX.1):  @ref{Descriptor Flags}.

@comment F_GETFL
@item int F_GETFL

@file{fcntl.h} (POSIX.1):  @ref{Getting File Status Flags}.

@comment fgetgrent
@item struct group * fgetgrent (FILE *@var{stream})

@file{grp.h} (SVID):  @ref{Scanning All Groups}.

@comment F_GETLK
@item int F_GETLK

@file{fcntl.h} (POSIX.1):  @ref{File Locks}.

@comment F_GETOWN
@item int F_GETOWN

@file{fcntl.h} (BSD):  @ref{Interrupt Input}.

@comment fgetpos
@item int fgetpos (FILE *@var{stream}, fpos_t *@var{position})

@file{stdio.h} (ANSI):  @ref{Portable Positioning}.

@comment fgetpwent
@item struct passwd * fgetpwent (FILE *@var{stream})

@file{pwd.h} (SVID):  @ref{Scanning All Users}.

@comment fgets
@item char * fgets (char *@var{s}, int @var{count}, FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{Line Input}.

@comment FILE
@item FILE

@file{stdio.h} (ANSI):  @ref{Streams}.

@comment FILENAME_MAX
@item int FILENAME_MAX

@file{stdio.h} (ANSI):  @ref{Limits for Files}.

@comment fileno
@item int fileno (FILE *@var{stream})

@file{stdio.h} (POSIX.1):  @ref{Descriptors and Streams}.

@comment finite
@item int finite (double @var{x})

@file{math.h} (BSD):  @ref{Predicates on Floats}.

@comment floor
@item double floor (double @var{x})

@file{math.h} (ANSI):  @ref{Rounding and Remainders}.

@comment FLT_DIG
@item FLT_DIG

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment FLT_EPSILON
@item FLT_EPSILON

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment FLT_MANT_DIG
@item FLT_MANT_DIG

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment FLT_MAX_10_EXP
@item FLT_MAX_10_EXP

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment FLT_MAX_EXP
@item FLT_MAX_EXP

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment FLT_MAX
@item FLT_MAX

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment FLT_MIN_10_EXP
@item FLT_MIN_10_EXP

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment FLT_MIN_EXP
@item FLT_MIN_EXP

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment FLT_MIN
@item FLT_MIN

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment FLT_RADIX
@item FLT_RADIX

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment FLT_ROUNDS
@item FLT_ROUNDS

@file{float.h} (ANSI):  @ref{Floating Point Parameters}.

@comment FLUSHO
@item tcflag_t FLUSHO

@file{termios.h} (BSD):  @ref{Local Modes}.

@comment fmemopen
@item FILE * fmemopen (void *@var{buf}, size_t @var{size}, const char *@var{opentype})

@file{stdio.h} (GNU):  @ref{String Streams}.

@comment fmod
@item double fmod (double @var{numerator}, double @var{denominator})

@file{math.h} (ANSI):  @ref{Rounding and Remainders}.

@comment fnmatch
@item int fnmatch (const char *@var{pattern}, const char *@var{string}, int @var{flags})

@file{fnmatch.h} (POSIX.2):  @ref{Wildcard Matching}.

@comment FNM_CASEFOLD
@item FNM_CASEFOLD

@file{fnmatch.h} (GNU):  @ref{Wildcard Matching}.

@comment FNM_FILE_NAME
@item FNM_FILE_NAME

@file{fnmatch.h} (GNU):  @ref{Wildcard Matching}.

@comment FNM_LEADING_DIR
@item FNM_LEADING_DIR

@file{fnmatch.h} (GNU):  @ref{Wildcard Matching}.

@comment FNM_NOESCAPE
@item FNM_NOESCAPE

@file{fnmatch.h} (POSIX.2):  @ref{Wildcard Matching}.

@comment FNM_PATHNAME
@item FNM_PATHNAME

@file{fnmatch.h} (POSIX.2):  @ref{Wildcard Matching}.

@comment FNM_PERIOD
@item FNM_PERIOD

@file{fnmatch.h} (POSIX.2):  @ref{Wildcard Matching}.

@comment F_OK
@item int F_OK

@file{unistd.h} (POSIX.1):  @ref{Testing File Access}.

@comment fopencookie
@item FILE * fopencookie (void *@var{cookie}, const char *@var{opentype}, cookie_io_functions_t @var{io-functions})

@file{stdio.h} (GNU):  @ref{Streams and Cookies}.

@comment fopen
@item FILE * fopen (const char *@var{filename}, const char *@var{opentype})

@file{stdio.h} (ANSI):  @ref{Opening Streams}.

@comment FOPEN_MAX
@item int FOPEN_MAX

@file{stdio.h} (ANSI):  @ref{Opening Streams}.

@comment fork
@item pid_t fork (void)

@file{unistd.h} (POSIX.1):  @ref{Creating a Process}.

@comment fpathconf
@item long int fpathconf (int @var{filedes}, int @var{parameter})

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment FPE_DECOVF_TRAP
@item FPE_DECOVF_TRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_FLTDIV_FAULT
@item FPE_FLTDIV_FAULT

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_FLTDIV_TRAP
@item FPE_FLTDIV_TRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_FLTOVF_FAULT
@item FPE_FLTOVF_FAULT

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_FLTOVF_TRAP
@item FPE_FLTOVF_TRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_FLTUND_FAULT
@item FPE_FLTUND_FAULT

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_FLTUND_TRAP
@item FPE_FLTUND_TRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_INTDIV_TRAP
@item FPE_INTDIV_TRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_INTOVF_TRAP
@item FPE_INTOVF_TRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_SUBRNG_TRAP
@item FPE_SUBRNG_TRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment fpos_t
@item fpos_t

@file{stdio.h} (ANSI):  @ref{Portable Positioning}.

@comment fprintf
@item int fprintf (FILE *@var{stream}, const char *@var{template}, @dots{})

@file{stdio.h} (ANSI):  @ref{Formatted Output Functions}.

@comment fputc
@item int fputc (int @var{c}, FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{Simple Output}.

@comment fputs
@item int fputs (const char *@var{s}, FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{Simple Output}.

@comment F_RDLCK
@item F_RDLCK

@file{fcntl.h} (POSIX.1):  @ref{File Locks}.

@comment fread
@item size_t fread (void *@var{data}, size_t @var{size}, size_t @var{count}, FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{Block Input/Output}.

@comment __free_hook
@item __free_hook

@file{malloc.h} (GNU):  @ref{Hooks for Malloc}.

@comment free
@item void free (void *@var{ptr})

@file{malloc.h}, @file{stdlib.h} (ANSI):  @ref{Freeing after Malloc}.

@comment freopen
@item FILE * freopen (const char *@var{filename}, const char *@var{opentype}, FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{Opening Streams}.

@comment frexp
@item double frexp (double @var{value}, int *@var{exponent})

@file{math.h} (ANSI):  @ref{Normalization Functions}.

@comment fscanf
@item int fscanf (FILE *@var{stream}, const char *@var{template}, @dots{})

@file{stdio.h} (ANSI):  @ref{Formatted Input Functions}.

@comment fseek
@item int fseek (FILE *@var{stream}, long int @var{offset}, int @var{whence})

@file{stdio.h} (ANSI):  @ref{File Positioning}.

@comment F_SETFD
@item int F_SETFD

@file{fcntl.h} (POSIX.1):  @ref{Descriptor Flags}.

@comment F_SETFL
@item int F_SETFL

@file{fcntl.h} (POSIX.1):  @ref{Getting File Status Flags}.

@comment F_SETLK
@item int F_SETLK

@file{fcntl.h} (POSIX.1):  @ref{File Locks}.

@comment F_SETLKW
@item int F_SETLKW

@file{fcntl.h} (POSIX.1):  @ref{File Locks}.

@comment F_SETOWN
@item int F_SETOWN

@file{fcntl.h} (BSD):  @ref{Interrupt Input}.

@comment fsetpos
@item int fsetpos (FILE *@var{stream}, const fpos_t @var{position})

@file{stdio.h} (ANSI):  @ref{Portable Positioning}.

@comment fstat
@item int fstat (int @var{filedes}, struct stat *@var{buf})

@file{sys/stat.h} (POSIX.1):  @ref{Reading Attributes}.

@comment ftell
@item long int ftell (FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{File Positioning}.

@comment F_UNLCK
@item F_UNLCK

@file{fcntl.h} (POSIX.1):  @ref{File Locks}.

@comment fwrite
@item size_t fwrite (const void *@var{data}, size_t @var{size}, size_t @var{count}, FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{Block Input/Output}.

@comment F_WRLCK
@item F_WRLCK

@file{fcntl.h} (POSIX.1):  @ref{File Locks}.

@comment getchar
@item int getchar (void)

@file{stdio.h} (ANSI):  @ref{Character Input}.

@comment getc
@item int getc (FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{Character Input}.

@comment getcwd
@item char * getcwd (char *@var{buffer}, size_t @var{size})

@file{unistd.h} (POSIX.1):  @ref{Working Directory}.

@comment getdelim
@item ssize_t getdelim (char **@var{lineptr}, size_t *@var{n}, int @var{delimiter}, FILE *@var{stream})

@file{stdio.h} (GNU):  @ref{Line Input}.

@comment getegid
@item gid_t getegid (void)

@file{unistd.h} (POSIX.1):  @ref{Reading Persona}.

@comment getenv
@item char * getenv (const char *@var{name})

@file{stdlib.h} (ANSI):  @ref{Environment Access}.

@comment geteuid
@item uid_t geteuid (void)

@file{unistd.h} (POSIX.1):  @ref{Reading Persona}.

@comment getgid
@item gid_t getgid (void)

@file{unistd.h} (POSIX.1):  @ref{Reading Persona}.

@comment getgrent
@item struct group * getgrent (void)

@file{grp.h} (SVID, BSD):  @ref{Scanning All Groups}.

@comment getgrgid
@item struct group * getgrgid (gid_t @var{gid})

@file{grp.h} (POSIX.1):  @ref{Lookup Group}.

@comment getgrnam
@item struct group * getgrnam (const char *@var{name})

@file{grp.h} (SVID, BSD):  @ref{Lookup Group}.

@comment getgroups
@item int getgroups (int @var{count}, gid_t *@var{groups})

@file{unistd.h} (POSIX.1):  @ref{Reading Persona}.

@comment gethostbyaddr
@item struct hostent * gethostbyaddr (const char *@var{addr}, int @var{length}, int @var{format})

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment gethostbyname
@item struct hostent * gethostbyname (const char *@var{name})

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment gethostent
@item struct hostent * gethostent ()

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment gethostid
@item long int gethostid (void)

@file{unistd.h} (BSD):  @ref{Host Identification}.

@comment gethostname
@item int gethostname (char *@var{name}, size_t @var{size})

@file{unistd.h} (BSD):  @ref{Host Identification}.

@comment getitimer
@item int getitimer (int @var{which}, struct itimerval *@var{old})

@file{sys/time.h} (BSD):  @ref{Setting an Alarm}.

@comment getline
@item ssize_t getline (char **@var{lineptr}, size_t *@var{n}, FILE *@var{stream})

@file{stdio.h} (GNU):  @ref{Line Input}.

@comment getlogin
@item char * getlogin (void)

@file{unistd.h} (POSIX.1):  @ref{Who Logged In}.

@comment getnetbyaddr
@item struct netent * getnetbyaddr (long @var{net}, int @var{type})

@file{netdb.h} (BSD):  @ref{Networks Database}.

@comment getnetbyname
@item struct netent * getnetbyname (const char *@var{name})

@file{netdb.h} (BSD):  @ref{Networks Database}.

@comment getnetent
@item struct netent * getnetent (void)

@file{netdb.h} (BSD):  @ref{Networks Database}.

@comment getopt
@item int getopt (int @var{argc}, char **@var{argv}, const char *@var{options})

@file{unistd.h} (POSIX.2):  @ref{Parsing Options}.

@comment getopt_long
@item int getopt_long (int @var{argc}, char **@var{argv}, const char *@var{shortopts}, struct option *@var{longopts}, int *@var{indexptr})

@file{getopt.h} (GNU):  @ref{Long Options}.

@comment getpeername
@item int getpeername (int @var{socket}, struct sockaddr *@var{addr}, size_t *@var{length-ptr})

@file{sys/socket.h} (BSD):  @ref{Who is Connected}.

@comment getpgrp
@item pid_t getpgrp (pid_t @var{pid})

@file{unistd.h} (BSD):  @ref{Process Group Functions,}.

@comment getpgrp
@item pid_t getpgrp (void)

@file{unistd.h} (POSIX.1):  @ref{Process Group Functions,}.

@comment getpid
@item pid_t getpid (void)

@file{unistd.h} (POSIX.1):  @ref{Process Identification}.

@comment getppid
@item pid_t getppid (void)

@file{unistd.h} (POSIX.1):  @ref{Process Identification}.

@comment getpriority
@item int getpriority (int @var{class}, int @var{id})

@file{sys/resource.h} (BSD):  @ref{Priority}.

@comment getprotobyname
@item struct protoent * getprotobyname (const char *@var{name})

@file{netdb.h} (BSD):  @ref{Protocols Database}.

@comment getprotobynumber
@item struct protoent * getprotobynumber (int @var{protocol})

@file{netdb.h} (BSD):  @ref{Protocols Database}.

@comment getprotoent
@item struct protoent * getprotoent (void)

@file{netdb.h} (BSD):  @ref{Protocols Database}.

@comment getpwent
@item struct passwd * getpwent (void)

@file{pwd.h} (POSIX.1):  @ref{Scanning All Users}.

@comment getpwnam
@item struct passwd * getpwnam (const char *@var{name})

@file{pwd.h} (POSIX.1):  @ref{Lookup User}.

@comment getpwuid
@item struct passwd * getpwuid (uid_t @var{uid})

@file{pwd.h} (POSIX.1):  @ref{Lookup User}.

@comment getrlimit
@item int getrlimit (int @var{resource}, struct rlimit *@var{rlp})

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment getrusage
@item int getrusage (int @var{processes}, struct rusage *@var{rusage})

@file{sys/resource.h} (BSD):  @ref{Resource Usage}.

@comment getservbyname
@item struct servent * getservbyname (const char *@var{name}, const char *@var{proto})

@file{netdb.h} (BSD):  @ref{Services Database}.

@comment getservbyport
@item struct servent * getservbyport (int @var{port}, const char *@var{proto})

@file{netdb.h} (BSD):  @ref{Services Database}.

@comment getservent
@item struct servent * getservent (void)

@file{netdb.h} (BSD):  @ref{Services Database}.

@comment gets
@item char * gets (char *@var{s})

@file{stdio.h} (ANSI):  @ref{Line Input}.

@comment getsockname
@item int getsockname (int @var{socket}, struct sockaddr *@var{addr}, size_t *@var{length-ptr})

@file{sys/socket.h} (BSD):  @ref{Reading Address}.

@comment getsockopt
@item int getsockopt (int @var{socket}, int @var{level}, int @var{optname}, void *@var{optval}, size_t *@var{optlen-ptr})

@file{sys/socket.h} (BSD):  @ref{Socket Option Functions}.

@comment gettimeofday
@item int gettimeofday (struct timeval *@var{tp}, struct timezone *@var{tzp})

@file{sys/time.h} (BSD):  @ref{High-Resolution Calendar}.

@comment getuid
@item uid_t getuid (void)

@file{unistd.h} (POSIX.1):  @ref{Reading Persona}.

@comment getumask
@item mode_t getumask (void)

@file{sys/stat.h} (GNU):  @ref{Setting Permissions}.

@comment getwd
@item char * getwd (char *@var{buffer})

@file{unistd.h} (BSD):  @ref{Working Directory}.

@comment getw
@item int getw (FILE *@var{stream})

@file{stdio.h} (SVID):  @ref{Character Input}.

@comment gid_t
@item gid_t

@file{sys/types.h} (POSIX.1):  @ref{Reading Persona}.

@comment GLOB_ABORTED
@item GLOB_ABORTED

@file{glob.h} (POSIX.2):  @ref{Calling Glob}.

@comment GLOB_APPEND
@item GLOB_APPEND

@file{glob.h} (POSIX.2):  @ref{Flags for Globbing}.

@comment GLOB_DOOFFS
@item GLOB_DOOFFS

@file{glob.h} (POSIX.2):  @ref{Flags for Globbing}.

@comment GLOB_ERR
@item GLOB_ERR

@file{glob.h} (POSIX.2):  @ref{Flags for Globbing}.

@comment glob
@item int glob (const char *@var{pattern}, int @var{flags}, int (*@var{errfunc}) (const char *@var{filename}, int @var{error-code}), glob_t *@var{vector-ptr})

@file{glob.h} (POSIX.2):  @ref{Calling Glob}.

@comment GLOB_MARK
@item GLOB_MARK

@file{glob.h} (POSIX.2):  @ref{Flags for Globbing}.

@comment GLOB_NOCHECK
@item GLOB_NOCHECK

@file{glob.h} (POSIX.2):  @ref{Flags for Globbing}.

@comment GLOB_NOESCAPE
@item GLOB_NOESCAPE

@file{glob.h} (POSIX.2):  @ref{Flags for Globbing}.

@comment GLOB_NOMATCH
@item GLOB_NOMATCH

@file{glob.h} (POSIX.2):  @ref{Calling Glob}.

@comment GLOB_NOSORT
@item GLOB_NOSORT

@file{glob.h} (POSIX.2):  @ref{Flags for Globbing}.

@comment GLOB_NOSPACE
@item GLOB_NOSPACE

@file{glob.h} (POSIX.2):  @ref{Calling Glob}.

@comment glob_t
@item glob_t

@file{glob.h} (POSIX.2):  @ref{Calling Glob}.

@comment gmtime
@item struct tm * gmtime (const time_t *@var{time})

@file{time.h} (ANSI):  @ref{Broken-down Time}.

@comment _GNU_SOURCE
@item _GNU_SOURCE

(GNU):  @ref{Feature Test Macros}.

@comment gsignal
@item int gsignal (int @var{signum})

@file{signal.h} (SVID):  @ref{Signaling Yourself}.

@comment HOST_NOT_FOUND
@item HOST_NOT_FOUND

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment htonl
@item unsigned long int htonl (unsigned long int @var{hostlong})

@file{netinet/in.h} (BSD):  @ref{Byte Order}.

@comment htons
@item unsigned short int htons (unsigned short int @var{hostshort})

@file{netinet/in.h} (BSD):  @ref{Byte Order}.

@comment HUGE_VAL
@item double HUGE_VAL

@file{math.h} (ANSI):  @ref{Domain and Range Errors}.

@comment HUPCL
@item tcflag_t HUPCL

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment hypot
@item double hypot (double @var{x}, double @var{y})

@file{math.h} (BSD):  @ref{Exponents and Logarithms}.

@comment ICANON
@item tcflag_t ICANON

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment ICRNL
@item tcflag_t ICRNL

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment IEXTEN
@item tcflag_t IEXTEN

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment IGNBRK
@item tcflag_t IGNBRK

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment IGNCR
@item tcflag_t IGNCR

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment IGNPAR
@item tcflag_t IGNPAR

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment IMAXBEL
@item tcflag_t IMAXBEL

@file{termios.h} (BSD):  @ref{Input Modes}.

@comment INADDR_ANY
@item unsigned long int INADDR_ANY

@file{netinet/in.h} (BSD):  @ref{Host Address Data Type}.

@comment INADDR_BROADCAST
@item unsigned long int INADDR_BROADCAST

@file{netinet/in.h} (BSD):  @ref{Host Address Data Type}.

@comment INADDR_LOOPBACK
@item unsigned long int INADDR_LOOPBACK

@file{netinet/in.h} (BSD):  @ref{Host Address Data Type}.

@comment INADDR_NONE
@item unsigned long int INADDR_NONE

@file{netinet/in.h} (BSD):  @ref{Host Address Data Type}.

@comment index
@item char * index (const char *@var{string}, int @var{c})

@file{string.h} (BSD):  @ref{Search Functions,}.

@comment inet_addr
@item unsigned long int inet_addr (const char *@var{name})

@file{arpa/inet.h} (BSD):  @ref{Host Address Functions}.

@comment inet_aton
@item int inet_aton (const char *@var{name}, struct in_addr *@var{addr})

@file{arpa/inet.h} (BSD):  @ref{Host Address Functions}.

@comment inet_lnaof
@item int inet_lnaof (struct in_addr @var{addr})

@file{arpa/inet.h} (BSD):  @ref{Host Address Functions}.

@comment inet_makeaddr
@item struct in_addr inet_makeaddr (int @var{net}, int @var{local})

@file{arpa/inet.h} (BSD):  @ref{Host Address Functions}.

@comment inet_netof
@item int inet_netof (struct in_addr @var{addr})

@file{arpa/inet.h} (BSD):  @ref{Host Address Functions}.

@comment inet_network
@item unsigned long int inet_network (const char *@var{name})

@file{arpa/inet.h} (BSD):  @ref{Host Address Functions}.

@comment inet_ntoa
@item char * inet_ntoa (struct in_addr @var{addr})

@file{arpa/inet.h} (BSD):  @ref{Host Address Functions}.

@comment infnan
@item double infnan (int @var{error})

@file{math.h} (BSD):  @ref{Predicates on Floats}.

@comment initgroups
@item int initgroups (const char *@var{user}, gid_t @var{gid})

@file{grp.h} (BSD):  @ref{Setting Groups}.

@comment initstate
@item void * initstate (unsigned int @var{seed}, void *@var{state}, size_t @var{size})

@file{stdlib.h} (BSD):  @ref{BSD Random}.

@comment INLCR
@item tcflag_t INLCR

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment ino_t
@item ino_t

@file{sys/types.h} (POSIX.1):  @ref{Attribute Meanings}.

@comment INPCK
@item tcflag_t INPCK

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment int
@item int RLIM_INFINITY

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment INT_MAX
@item INT_MAX

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment INT_MIN
@item INT_MIN

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment _IOFBF
@item int _IOFBF

@file{stdio.h} (ANSI):  @ref{Controlling Buffering}.

@comment _IOLBF
@item int _IOLBF

@file{stdio.h} (ANSI):  @ref{Controlling Buffering}.

@comment _IONBF
@item int _IONBF

@file{stdio.h} (ANSI):  @ref{Controlling Buffering}.

@comment IPPORT_RESERVED
@item int IPPORT_RESERVED

@file{netinet/in.h} (BSD):  @ref{Ports}.

@comment IPPORT_USERRESERVED
@item int IPPORT_USERRESERVED

@file{netinet/in.h} (BSD):  @ref{Ports}.

@comment isalnum
@item int isalnum (int @var{c})

@file{ctype.h} (ANSI):  @ref{Classification of Characters,}.

@comment isalpha
@item int isalpha (int @var{c})

@file{ctype.h} (ANSI):  @ref{Classification of Characters,}.

@comment isascii
@item int isascii (int @var{c})

@file{ctype.h} (SVID, BSD):  @ref{Classification of Characters,}.

@comment isatty
@item int isatty (int @var{filedes})

@file{unistd.h} (POSIX.1):  @ref{Is It a Terminal}.

@comment isblank
@item int isblank (int @var{c})

@file{ctype.h} (GNU):  @ref{Classification of Characters,}.

@comment iscntrl
@item int iscntrl (int @var{c})

@file{ctype.h} (ANSI):  @ref{Classification of Characters,}.

@comment isdigit
@item int isdigit (int @var{c})

@file{ctype.h} (ANSI):  @ref{Classification of Characters,}.

@comment isgraph
@item int isgraph (int @var{c})

@file{ctype.h} (ANSI):  @ref{Classification of Characters,}.

@comment ISIG
@item tcflag_t ISIG

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment isinf
@item int isinf (double @var{x})

@file{math.h} (BSD):  @ref{Predicates on Floats}.

@comment islower
@item int islower (int @var{c})

@file{ctype.h} (ANSI):  @ref{Classification of Characters,}.

@comment isnan
@item int isnan (double @var{x})

@file{math.h} (BSD):  @ref{Predicates on Floats}.

@comment isprint
@item int isprint (int @var{c})

@file{ctype.h} (ANSI):  @ref{Classification of Characters,}.

@comment ispunct
@item int ispunct (int @var{c})

@file{ctype.h} (ANSI):  @ref{Classification of Characters,}.

@comment isspace
@item int isspace (int @var{c})

@file{ctype.h} (ANSI):  @ref{Classification of Characters,}.

@comment ISTRIP
@item tcflag_t ISTRIP

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment isupper
@item int isupper (int @var{c})

@file{ctype.h} (ANSI):  @ref{Classification of Characters,}.

@comment isxdigit
@item int isxdigit (int @var{c})

@file{ctype.h} (ANSI):  @ref{Classification of Characters,}.

@comment *
@item char * tzname [2]

@file{time.h} (POSIX.1):  @ref{Time Zone Functions}.

@comment 
@item

@file{fcntl.h} (POSIX.1):  @ref{Operating Modes}.

@comment ITIMER_PROF
@item ITIMER_PROF

@file{sys/time.h} (BSD):  @ref{Setting an Alarm}.

@comment ITIMER_REAL
@item ITIMER_REAL

@file{sys/time.h} (BSD):  @ref{Setting an Alarm}.

@comment ITIMER_VIRTUAL
@item ITIMER_VIRTUAL

@file{sys/time.h} (BSD):  @ref{Setting an Alarm}.

@comment IXANY
@item tcflag_t IXANY

@file{termios.h} (BSD):  @ref{Input Modes}.

@comment IXOFF
@item tcflag_t IXOFF

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment IXON
@item tcflag_t IXON

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment jmp_buf
@item jmp_buf

@file{setjmp.h} (ANSI):  @ref{Non-Local Details,}.

@comment kill
@item int kill (pid_t @var{pid}, int @var{signum})

@file{signal.h} (POSIX.1):  @ref{Signaling Another Process}.

@comment killpg
@item int killpg (int @var{pgid}, int @var{signum})

@file{signal.h} (BSD):  @ref{Signaling Another Process}.

@comment labs
@item long int labs (long int @var{number})

@file{stdlib.h} (ANSI):  @ref{Absolute Value}.

@comment LANG
@item LANG

@file{locale.h} (ANSI):  @ref{Locale Categories,}.

@comment LC_ALL
@item LC_ALL

@file{locale.h} (ANSI):  @ref{Locale Categories,}.

@comment LC_COLLATE
@item LC_COLLATE

@file{locale.h} (ANSI):  @ref{Locale Categories,}.

@comment LC_CTYPE
@item LC_CTYPE

@file{locale.h} (ANSI):  @ref{Locale Categories,}.

@comment LC_MONETARY
@item LC_MONETARY

@file{locale.h} (ANSI):  @ref{Locale Categories,}.

@comment LC_NUMERIC
@item LC_NUMERIC

@file{locale.h} (ANSI):  @ref{Locale Categories,}.

@comment LC_RESPONSE
@item LC_RESPONSE

@file{locale.h} (GNU):  @ref{Locale Categories,}.

@comment L_ctermid
@item int L_ctermid

@file{stdio.h} (POSIX.1):  @ref{Identifying the Terminal,}.

@comment LC_TIME
@item LC_TIME

@file{locale.h} (ANSI):  @ref{Locale Categories,}.

@comment L_cuserid
@item int L_cuserid

@file{stdio.h} (POSIX.1):  @ref{Who Logged In}.

@comment ldexp
@item double ldexp (double @var{value}, int @var{exponent})

@file{math.h} (ANSI):  @ref{Normalization Functions}.

@comment ldiv
@item ldiv_t ldiv (long int @var{numerator}, long int @var{denominator})

@file{stdlib.h} (ANSI):  @ref{Integer Division}.

@comment ldiv_t
@item ldiv_t

@file{stdlib.h} (ANSI):  @ref{Integer Division}.

@comment L_INCR
@item L_INCR

@file{sys/file.h} (BSD):  @ref{File Positioning}.

@comment LINE_MAX
@item int LINE_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment link
@item int link (const char *@var{oldname}, const char *@var{newname})

@file{unistd.h} (POSIX.1):  @ref{Hard Links}.

@comment LINK_MAX
@item int LINK_MAX

@file{limits.h} (POSIX.1):  @ref{Limits for Files}.

@comment listen
@item int listen (int @var{socket}, unsigned int @var{n})

@file{sys/socket.h} (BSD):  @ref{Listening}.

@comment localeconv
@item struct lconv * localeconv (void)

@file{locale.h} (ANSI):  @ref{Numeric Formatting,}.

@comment localtime
@item struct tm * localtime (const time_t *@var{time})

@file{time.h} (ANSI):  @ref{Broken-down Time}.

@comment log10
@item double log10 (double @var{x})

@file{math.h} (ANSI):  @ref{Exponents and Logarithms}.

@comment log1p
@item double log1p (double @var{x})

@file{math.h} (BSD):  @ref{Exponents and Logarithms}.

@comment logb
@item double logb (double @var{x})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment log
@item double log (double @var{x})

@file{math.h} (ANSI):  @ref{Exponents and Logarithms}.

@comment longjmp
@item void longjmp (jmp_buf @var{state}, int @var{value})

@file{setjmp.h} (ANSI):  @ref{Non-Local Details,}.

@comment LONG_LONG_MAX
@item LONG_LONG_MAX

@file{limits.h} (GNU):  @ref{Range of Type}.

@comment LONG_LONG_MIN
@item LONG_LONG_MIN

@file{limits.h} (GNU):  @ref{Range of Type}.

@comment LONG_MAX
@item LONG_MAX

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment LONG_MIN
@item LONG_MIN

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment lseek
@item off_t lseek (int @var{filedes}, off_t @var{offset}, int @var{whence})

@file{unistd.h} (POSIX.1):  @ref{File Position Primitive}.

@comment L_SET
@item L_SET

@file{sys/file.h} (BSD):  @ref{File Positioning}.

@comment lstat
@item int lstat (const char *@var{filename}, struct stat *@var{buf})

@file{sys/stat.h} (BSD):  @ref{Reading Attributes}.

@comment L_tmpnam
@item int L_tmpnam

@file{stdio.h} (ANSI):  @ref{Temporary Files}.

@comment L_XTND
@item L_XTND

@file{sys/file.h} (BSD):  @ref{File Positioning}.

@comment __malloc_hook
@item __malloc_hook

@file{malloc.h} (GNU):  @ref{Hooks for Malloc}.

@comment malloc
@item void * malloc (size_t @var{size})

@file{malloc.h}, @file{stdlib.h} (ANSI):  @ref{Basic Allocation}.

@comment MAX_CANON
@item int MAX_CANON

@file{limits.h} (POSIX.1):  @ref{Limits for Files}.

@comment MAX_INPUT
@item int MAX_INPUT

@file{limits.h} (POSIX.1):  @ref{Limits for Files}.

@comment MAXNAMLEN
@item int MAXNAMLEN

@file{dirent.h} (BSD):  @ref{Limits for Files}.

@comment MB_CUR_MAX
@item int MB_CUR_MAX

@file{stdlib.h} (ANSI):  @ref{Multibyte Char Intro,}.

@comment mblen
@item int mblen (const char *@var{string}, size_t @var{size})

@file{stdlib.h} (ANSI):  @ref{Length of Char,}.

@comment MB_LEN_MAX
@item int MB_LEN_MAX

@file{limits.h} (ANSI):  @ref{Multibyte Char Intro,}.

@comment mbstowcs
@item size_t mbstowcs (wchar_t *@var{wstring}, const char *@var{string}, size_t @var{size})

@file{stdlib.h} (ANSI):  @ref{Wide String Conversion,}.

@comment mbtowc
@item int mbtowc (wchar_t *@var{result}, const char *@var{string}, size_t @var{size})

@file{stdlib.h} (ANSI):  @ref{Converting One Char,}.

@comment mcheck
@item int mcheck (void (*@var{abortfn}) (enum mcheck_status @var{status}))

@file{malloc.h} (GNU):  @ref{Heap Consistency Checking}.

@comment MDMBUF
@item tcflag_t MDMBUF

@file{termios.h} (BSD):  @ref{Control Modes}.

@comment memalign
@item void * memalign (size_t @var{size}, size_t @var{boundary})

@file{malloc.h}, @file{stdlib.h} (BSD):  @ref{Aligned Memory Blocks}.

@comment memccpy
@item void * memccpy (void *@var{to}, const void *@var{from}, int @var{c}, size_t @var{size})

@file{string.h} (SVID):  @ref{Copying and Concatenation,}.

@comment memchr
@item void * memchr (const void *@var{block}, int @var{c}, size_t @var{size})

@file{string.h} (ANSI):  @ref{Search Functions,}.

@comment memcmp
@item int memcmp (const void *@var{a1}, const void *@var{a2}, size_t @var{size})

@file{string.h} (ANSI):  @ref{String/Array Comparison,}.

@comment memcpy
@item void * memcpy (void *@var{to}, const void *@var{from}, size_t @var{size})

@file{string.h} (ANSI):  @ref{Copying and Concatenation,}.

@comment memmem
@item void * memmem (const void *@var{needle}, size_t @var{needle-len},@*const void *@var{haystack}, size_t @var{haystack-len})

@file{string.h} (GNU):  @ref{Search Functions,}.

@comment memmove
@item void * memmove (void *@var{to}, const void *@var{from}, size_t @var{size})

@file{string.h} (ANSI):  @ref{Copying and Concatenation,}.

@comment memory_warnings
@item void memory_warnings (void *@var{start}, void (*@var{warn-func}) (const char *))

@file{malloc.h} (GNU):  @ref{Memory Warnings}.

@comment memset
@item void * memset (void *@var{block}, int @var{c}, size_t @var{size})

@file{string.h} (ANSI):  @ref{Copying and Concatenation,}.

@comment mkdir
@item int mkdir (const char *@var{filename}, mode_t @var{mode})

@file{sys/stat.h} (POSIX.1):  @ref{Creating Directories}.

@comment mkfifo
@item int mkfifo (const char *@var{filename}, mode_t @var{mode})

@file{sys/stat.h} (POSIX.1):  @ref{FIFO Special Files}.

@comment mknod
@item int mknod (const char *@var{filename}, int @var{mode}, int @var{dev})

@file{sys/stat.h} (BSD):  @ref{Making Special Files}.

@comment mkstemp
@item int mkstemp (char *@var{template})

@file{unistd.h} (BSD):  @ref{Temporary Files}.

@comment mktemp
@item char * mktemp (char *@var{template})

@file{unistd.h} (Unix):  @ref{Temporary Files}.

@comment mktime
@item time_t mktime (struct tm *@var{brokentime})

@file{time.h} (ANSI):  @ref{Broken-down Time}.

@comment mode_t
@item mode_t

@file{sys/types.h} (POSIX.1):  @ref{Attribute Meanings}.

@comment modf
@item double modf (double @var{value}, double *@var{integer-part})

@file{math.h} (ANSI):  @ref{Rounding and Remainders}.

@comment MSG_DONTROUTE
@item int MSG_DONTROUTE

@file{sys/socket.h} (BSD):  @ref{Socket Data Options}.

@comment MSG_OOB
@item int MSG_OOB

@file{sys/socket.h} (BSD):  @ref{Socket Data Options}.

@comment MSG_PEEK
@item int MSG_PEEK

@file{sys/socket.h} (BSD):  @ref{Socket Data Options}.

@comment mstats
@item struct mstats mstats (void)

@file{malloc.h} (GNU):  @ref{Statistics of Malloc}.

@comment NAME_MAX
@item int NAME_MAX

@file{limits.h} (POSIX.1):  @ref{Limits for Files}.

@comment NAN
@item double NAN

@file{math.h} (GNU):  @ref{Not a Number}.

@comment NCCS
@item int NCCS

@file{termios.h} (POSIX.1):  @ref{Mode Data Types}.

@comment NGROUPS_MAX
@item int NGROUPS_MAX

@file{limits.h} (POSIX.1):  @ref{General Limits}.

@comment nice
@item int nice (int @var{increment})

@file{dunno.h} (dunno.h):  @ref{Priority}.

@comment nlink_t
@item nlink_t

@file{sys/types.h} (POSIX.1):  @ref{Attribute Meanings}.

@comment NO_ADDRESS
@item NO_ADDRESS

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment NOFLSH
@item tcflag_t NOFLSH

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment NOKERNINFO
@item tcflag_t NOKERNINFO

@file{termios.h} (BSD):  @ref{Local Modes}.

@comment NO_RECOVERY
@item NO_RECOVERY

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment NSIG
@item int NSIG

@file{signal.h} (BSD):  @ref{Standard Signals}.

@comment ntohl
@item unsigned long int ntohl (unsigned long int @var{netlong})

@file{netinet/in.h} (BSD):  @ref{Byte Order}.

@comment ntohs
@item unsigned short int ntohs (unsigned short int @var{netshort})

@file{netinet/in.h} (BSD):  @ref{Byte Order}.

@comment NULL
@item void * NULL

@file{stddef.h} (ANSI):  @ref{Null Pointer Constant}.

@comment O_ACCMODE
@item int O_ACCMODE

@file{fcntl.h} (POSIX.1):  @ref{Access Modes}.

@comment O_APPEND
@item int O_APPEND

@file{fcntl.h} (POSIX.1):  @ref{Operating Modes}.

@comment O_ASYNC
@item int O_ASYNC

@file{fcntl.h} (BSD):  @ref{Operating Modes}.

@comment obstack_1grow_fast
@item void obstack_1grow_fast (struct obstack *@var{obstack-ptr}, char @var{c})

@file{obstack.h} (GNU):  @ref{Extra Fast Growing}.

@comment obstack_1grow
@item void obstack_1grow (struct obstack *@var{obstack-ptr}, char @var{c})

@file{obstack.h} (GNU):  @ref{Growing Objects}.

@comment obstack_alignment_mask
@item int obstack_alignment_mask (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Obstacks Data Alignment}.

@comment obstack_alloc
@item void * obstack_alloc (struct obstack *@var{obstack-ptr}, int @var{size})

@file{obstack.h} (GNU):  @ref{Allocation in an Obstack}.

@comment obstack_base
@item void * obstack_base (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Status of an Obstack}.

@comment obstack_blank_fast
@item void obstack_blank_fast (struct obstack *@var{obstack-ptr}, int @var{size})

@file{obstack.h} (GNU):  @ref{Extra Fast Growing}.

@comment obstack_blank
@item void obstack_blank (struct obstack *@var{obstack-ptr}, int @var{size})

@file{obstack.h} (GNU):  @ref{Growing Objects}.

@comment obstack_chunk_size
@item int obstack_chunk_size (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Obstack Chunks}.

@comment obstack_copy0
@item void * obstack_copy0 (struct obstack *@var{obstack-ptr}, void *@var{address}, int @var{size})

@file{obstack.h} (GNU):  @ref{Allocation in an Obstack}.

@comment obstack_copy
@item void * obstack_copy (struct obstack *@var{obstack-ptr}, void *@var{address}, int @var{size})

@file{obstack.h} (GNU):  @ref{Allocation in an Obstack}.

@comment obstack_finish
@item void * obstack_finish (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Growing Objects}.

@comment obstack_free
@item void obstack_free (struct obstack *@var{obstack-ptr}, void *@var{object})

@file{obstack.h} (GNU):  @ref{Freeing Obstack Objects}.

@comment obstack_grow0
@item void obstack_grow0 (struct obstack *@var{obstack-ptr}, void *@var{data}, int @var{size})

@file{obstack.h} (GNU):  @ref{Growing Objects}.

@comment obstack_grow
@item void obstack_grow (struct obstack *@var{obstack-ptr}, void *@var{data}, int @var{size})

@file{obstack.h} (GNU):  @ref{Growing Objects}.

@comment obstack_init
@item int obstack_init (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Preparing for Obstacks}.

@comment obstack_next_free
@item void * obstack_next_free (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Status of an Obstack}.

@comment obstack_object_size
@item int obstack_object_size (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Growing Objects}.

@comment obstack_object_size
@item int obstack_object_size (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Status of an Obstack}.

@comment obstack_printf
@item int obstack_printf (struct obstack *@var{obstack}, const char *@var{template}, @dots{})

@file{stdio.h} (GNU):  @ref{Dynamic Output}.

@comment obstack_room
@item int obstack_room (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Extra Fast Growing}.

@comment obstack_vprintf
@item int obstack_vprintf (struct obstack *@var{obstack}, const char *@var{template}, va_list @var{ap})

@file{stdio.h} (GNU):  @ref{Variable Arguments Output}.

@comment O_CREAT
@item int O_CREAT

@file{fcntl.h} (POSIX.1):  @ref{Open-time Flags}.

@comment O_EXCL
@item int O_EXCL

@file{fcntl.h} (POSIX.1):  @ref{Open-time Flags}.

@comment O_EXEC
@item int O_EXEC

@file{fcntl.h} (GNU):  @ref{Access Modes}.

@comment O_EXLOCK
@item int O_EXLOCK

@file{fcntl.h} (BSD):  @ref{Open-time Flags}.

@comment offsetof
@item size_t offsetof (@var{type}, @var{member})

@file{stddef.h} (ANSI):  @ref{Structure Measurement}.

@comment off_t
@item off_t

@file{sys/types.h} (POSIX.1):  @ref{File Position Primitive}.

@comment O_FSYNC
@item int O_FSYNC

@file{fcntl.h} (BSD):  @ref{Operating Modes}.

@comment O_IGNORE_CTTY
@item int O_IGNORE_CTTY

@file{fcntl.h} (GNU):  @ref{Open-time Flags}.

@comment O_NDELAY
@item int O_NDELAY

@file{fcntl.h} (BSD):  @ref{Operating Modes}.

@comment on_exit
@item int on_exit (void (*@var{function})(int @var{status}, void *@var{arg}), void *@var{arg})

@file{stdlib.h} (SunOS):  @ref{Cleanups on Exit}.

@comment ONLCR
@item tcflag_t ONLCR

@file{termios.h} (BSD):  @ref{Output Modes}.

@comment O_NOATIME
@item int O_NOATIME

@file{fcntl.h} (GNU):  @ref{Operating Modes}.

@comment O_NOCTTY
@item int O_NOCTTY

@file{fcntl.h} (POSIX.1):  @ref{Open-time Flags}.

@comment ONOEOT
@item tcflag_t ONOEOT

@file{termios.h} (BSD):  @ref{Output Modes}.

@comment O_NOLINK
@item int O_NOLINK

@file{fcntl.h} (GNU):  @ref{Open-time Flags}.

@comment O_NONBLOCK
@item int O_NONBLOCK

@file{fcntl.h} (POSIX.1):  @ref{Open-time Flags}.

@comment O_NOTRANS
@item int O_NOTRANS

@file{fcntl.h} (GNU):  @ref{Open-time Flags}.

@comment opendir
@item DIR * opendir (const char *@var{dirname})

@file{dirent.h} (POSIX.1):  @ref{Opening a Directory}.

@comment open
@item int open (const char *@var{filename}, int @var{flags}[, mode_t @var{mode}])

@file{fcntl.h} (POSIX.1):  @ref{Opening and Closing Files}.

@comment OPEN_MAX
@item int OPEN_MAX

@file{limits.h} (POSIX.1):  @ref{General Limits}.

@comment open_memstream
@item FILE * open_memstream (char **@var{ptr}, size_t *@var{sizeloc})

@file{stdio.h} (GNU):  @ref{String Streams}.

@comment open_obstack_stream
@item FILE * open_obstack_stream (struct obstack *@var{obstack})

@file{stdio.h} (GNU):  @ref{Obstack Streams}.

@comment OPOST
@item tcflag_t OPOST

@file{termios.h} (POSIX.1):  @ref{Output Modes}.

@comment optarg
@item char * optarg

@file{unistd.h} (POSIX.2):  @ref{Parsing Options}.

@comment opterr
@item int opterr

@file{unistd.h} (POSIX.2):  @ref{Parsing Options}.

@comment optind
@item int optind

@file{unistd.h} (POSIX.2):  @ref{Parsing Options}.

@comment optopt
@item int optopt

@file{unistd.h} (POSIX.2):  @ref{Parsing Options}.

@comment O_RDONLY
@item int O_RDONLY

@file{fcntl.h} (POSIX.1):  @ref{Access Modes}.

@comment O_RDWR
@item int O_RDWR

@file{fcntl.h} (POSIX.1):  @ref{Access Modes}.

@comment O_READ
@item int O_READ

@file{fcntl.h} (GNU):  @ref{Access Modes}.

@comment O_SHLOCK
@item int O_SHLOCK

@file{fcntl.h} (BSD):  @ref{Open-time Flags}.

@comment O_SYNC
@item int O_SYNC

@file{fcntl.h} (BSD):  @ref{Operating Modes}.

@comment O_TRUNC
@item int O_TRUNC

@file{fcntl.h} (POSIX.1):  @ref{Open-time Flags}.

@comment O_WRITE
@item int O_WRITE

@file{fcntl.h} (GNU):  @ref{Access Modes}.

@comment O_WRONLY
@item int O_WRONLY

@file{fcntl.h} (POSIX.1):  @ref{Access Modes}.

@comment OXTABS
@item tcflag_t OXTABS

@file{termios.h} (BSD):  @ref{Output Modes}.

@comment PA_CHAR
@item PA_CHAR

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_DOUBLE
@item PA_DOUBLE

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_FLAG_LONG_DOUBLE
@item PA_FLAG_LONG_DOUBLE

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_FLAG_LONG
@item PA_FLAG_LONG

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_FLAG_LONG_LONG
@item PA_FLAG_LONG_LONG

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_FLAG_MASK
@item int PA_FLAG_MASK

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_FLAG_PTR
@item PA_FLAG_PTR

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_FLAG_SHORT
@item PA_FLAG_SHORT

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_FLOAT
@item PA_FLOAT

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_INT
@item PA_INT

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_LAST
@item PA_LAST

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_POINTER
@item PA_POINTER

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PARENB
@item tcflag_t PARENB

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment PARMRK
@item tcflag_t PARMRK

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment PARODD
@item tcflag_t PARODD

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment parse_printf_format
@item size_t parse_printf_format (const char *@var{template}, size_t @var{n}, int *@var{argtypes})

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_STRING
@item PA_STRING

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment pathconf
@item long int pathconf (const char *@var{filename}, int @var{parameter})

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment PATH_MAX
@item int PATH_MAX

@file{limits.h} (POSIX.1):  @ref{Limits for Files}.

@comment pause
@item int pause ()

@file{unistd.h} (POSIX.1):  @ref{Using Pause}.

@comment _PC_CHOWN_RESTRICTED
@item _PC_CHOWN_RESTRICTED

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_LINK_MAX
@item _PC_LINK_MAX

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment pclose
@item int pclose (FILE *@var{stream})

@file{stdio.h} (POSIX.2, SVID, BSD):  @ref{Pipe to a Subprocess}.

@comment _PC_MAX_CANON
@item _PC_MAX_CANON

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_MAX_INPUT
@item _PC_MAX_INPUT

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_NAME_MAX
@item _PC_NAME_MAX

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_NO_TRUNC
@item _PC_NO_TRUNC

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_PATH_MAX
@item _PC_PATH_MAX

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_PIPE_BUF
@item _PC_PIPE_BUF

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_VDISABLE
@item _PC_VDISABLE

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment PENDIN
@item tcflag_t PENDIN

@file{termios.h} (BSD):  @ref{Local Modes}.

@comment perror
@item void perror (const char *@var{message})

@file{stdio.h} (ANSI):  @ref{Error Messages,}.

@comment PF_FILE
@item int PF_FILE

@file{sys/socket.h} (GNU):  @ref{File Namespace Details}.

@comment PF_INET
@item int PF_INET

@file{sys/socket.h} (BSD):  @ref{Internet Namespace}.

@comment PF_UNIX
@item int PF_UNIX

@file{sys/socket.h} (BSD):  @ref{File Namespace Details}.

@comment pid_t
@item pid_t

@file{sys/types.h} (POSIX.1):  @ref{Process Identification}.

@comment PIPE_BUF
@item int PIPE_BUF

@file{limits.h} (POSIX.1):  @ref{Limits for Files}.

@comment pipe
@item int pipe (int @var{filedes}@t{[2]})

@file{unistd.h} (POSIX.1):  @ref{Creating a Pipe}.

@comment popen
@item FILE * popen (const char *@var{command}, const char *@var{mode})

@file{stdio.h} (POSIX.2, SVID, BSD):  @ref{Pipe to a Subprocess}.

@comment _POSIX2_BC_BASE_MAX
@item _POSIX2_BC_BASE_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_BC_DIM_MAX
@item _POSIX2_BC_DIM_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_BC_SCALE_MAX
@item _POSIX2_BC_SCALE_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_BC_STRING_MAX
@item _POSIX2_BC_STRING_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_C_DEV
@item int _POSIX2_C_DEV

@file{unistd.h} (POSIX.2):  @ref{System Options}.

@comment _POSIX2_COLL_WEIGHTS_MAX
@item _POSIX2_COLL_WEIGHTS_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_C_VERSION
@item long int _POSIX2_C_VERSION

@file{unistd.h} (POSIX.2):  @ref{Version Supported}.

@comment _POSIX2_EQUIV_CLASS_MAX
@item _POSIX2_EQUIV_CLASS_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_EXPR_NEST_MAX
@item _POSIX2_EXPR_NEST_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_FORT_DEV
@item int _POSIX2_FORT_DEV

@file{unistd.h} (POSIX.2):  @ref{System Options}.

@comment _POSIX2_FORT_RUN
@item int _POSIX2_FORT_RUN

@file{unistd.h} (POSIX.2):  @ref{System Options}.

@comment _POSIX2_LINE_MAX
@item _POSIX2_LINE_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_LOCALEDEF
@item int _POSIX2_LOCALEDEF

@file{unistd.h} (POSIX.2):  @ref{System Options}.

@comment _POSIX2_RE_DUP_MAX
@item _POSIX2_RE_DUP_MAX

@file{limits.h} (POSIX.2):  @ref{Minimums}.

@comment _POSIX2_SW_DEV
@item int _POSIX2_SW_DEV

@file{unistd.h} (POSIX.2):  @ref{System Options}.

@comment _POSIX_ARG_MAX
@item _POSIX_ARG_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_CHILD_MAX
@item _POSIX_CHILD_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_CHOWN_RESTRICTED
@item int _POSIX_CHOWN_RESTRICTED

@file{unistd.h} (POSIX.1):  @ref{Options for Files}.

@comment _POSIX_C_SOURCE
@item _POSIX_C_SOURCE

(POSIX.2):  @ref{Feature Test Macros}.

@comment _POSIX_JOB_CONTROL
@item int _POSIX_JOB_CONTROL

@file{unistd.h} (POSIX.1):  @ref{System Options}.

@comment _POSIX_LINK_MAX
@item _POSIX_LINK_MAX

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment _POSIX_MAX_CANON
@item _POSIX_MAX_CANON

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment _POSIX_MAX_INPUT
@item _POSIX_MAX_INPUT

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment _POSIX_NAME_MAX
@item _POSIX_NAME_MAX

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment _POSIX_NGROUPS_MAX
@item _POSIX_NGROUPS_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_NO_TRUNC
@item int _POSIX_NO_TRUNC

@file{unistd.h} (POSIX.1):  @ref{Options for Files}.

@comment _POSIX_OPEN_MAX
@item _POSIX_OPEN_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_PATH_MAX
@item _POSIX_PATH_MAX

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment _POSIX_PIPE_BUF
@item _POSIX_PIPE_BUF

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment _POSIX_SAVED_IDS
@item int _POSIX_SAVED_IDS

@file{unistd.h} (POSIX.1):  @ref{System Options}.

@comment _POSIX_SOURCE
@item _POSIX_SOURCE

(POSIX.1):  @ref{Feature Test Macros}.

@comment _POSIX_SSIZE_MAX
@item _POSIX_SSIZE_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_STREAM_MAX
@item _POSIX_STREAM_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_TZNAME_MAX
@item _POSIX_TZNAME_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_VDISABLE
@item unsigned char _POSIX_VDISABLE

@file{unistd.h} (POSIX.1):  @ref{Options for Files}.

@comment _POSIX_VERSION
@item long int _POSIX_VERSION

@file{unistd.h} (POSIX.1):  @ref{Version Supported}.

@comment pow
@item double pow (double @var{base}, double @var{power})

@file{math.h} (ANSI):  @ref{Exponents and Logarithms}.

@comment printf_arginfo_function
@item printf_arginfo_function

@file{printf.h} (GNU):  @ref{Defining the Output Handler}.

@comment printf_function
@item printf_function

@file{printf.h} (GNU):  @ref{Defining the Output Handler}.

@comment printf
@item int printf (const char *@var{template}, @dots{})

@file{stdio.h} (ANSI):  @ref{Formatted Output Functions}.

@comment PRIO_MAX
@item PRIO_MAX

@file{sys/resource.h} (BSD):  @ref{Priority}.

@comment PRIO_MIN
@item PRIO_MIN

@file{sys/resource.h} (BSD):  @ref{Priority}.

@comment PRIO_PGRP
@item PRIO_PGRP

@file{sys/resource.h} (BSD):  @ref{Priority}.

@comment PRIO_PROCESS
@item PRIO_PROCESS

@file{sys/resource.h} (BSD):  @ref{Priority}.

@comment PRIO_USER
@item PRIO_USER

@file{sys/resource.h} (BSD):  @ref{Priority}.

@comment program_invocation_name
@item char * program_invocation_name

@file{errno.h} (GNU):  @ref{Error Messages,}.

@comment program_invocation_short_name
@item char * program_invocation_short_name

@file{errno.h} (GNU):  @ref{Error Messages,}.

@comment psignal
@item void psignal (int @var{signum}, const char *@var{message})

@file{signal.h} (BSD):  @ref{Signal Messages}.

@comment P_tmpdir
@item char * P_tmpdir

@file{stdio.h} (SVID):  @ref{Temporary Files}.

@comment ptrdiff_t
@item ptrdiff_t

@file{stddef.h} (ANSI):  @ref{Important Data Types}.

@comment putchar
@item int putchar (int @var{c})

@file{stdio.h} (ANSI):  @ref{Simple Output}.

@comment putc
@item int putc (int @var{c}, FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{Simple Output}.

@comment putenv
@item int putenv (const char *@var{string})

@file{stdlib.h} (SVID):  @ref{Environment Access}.

@comment putpwent
@item int putpwent (const struct passwd *@var{p}, FILE *@var{stream})

@file{pwd.h} (SVID):  @ref{Writing a User Entry}.

@comment puts
@item int puts (const char *@var{s})

@file{stdio.h} (ANSI):  @ref{Simple Output}.

@comment putw
@item int putw (int @var{w}, FILE *@var{stream})

@file{stdio.h} (SVID):  @ref{Simple Output}.

@comment qsort
@item void qsort (void *@var{array}, size_t @var{count}, size_t @var{size}, comparison_fn_t @var{compare})

@file{stdlib.h} (ANSI):  @ref{Array Sort Function,}.

@comment raise
@item int raise (int @var{signum})

@file{signal.h} (ANSI):  @ref{Signaling Yourself}.

@comment r_alloc_free
@item void r_alloc_free (void **@var{handleptr})

@file{malloc.h} (GNU):  @ref{Using Relocator}.

@comment r_alloc
@item void * r_alloc (void **@var{handleptr}, size_t @var{size})

@file{malloc.h} (GNU):  @ref{Using Relocator}.

@comment rand
@item int rand ()

@file{stdlib.h} (ANSI):  @ref{ANSI Random}.

@comment RAND_MAX
@item int RAND_MAX

@file{stdlib.h} (ANSI):  @ref{ANSI Random}.

@comment random
@item long int random ()

@file{stdlib.h} (BSD):  @ref{BSD Random}.

@comment readdir
@item struct dirent * readdir (DIR *@var{dirstream})

@file{dirent.h} (POSIX.1):  @ref{Reading/Closing Directory}.

@comment read
@item ssize_t read (int @var{filedes}, void *@var{buffer}, size_t @var{size})

@file{unistd.h} (POSIX.1):  @ref{I/O Primitives}.

@comment readlink
@item int readlink (const char *@var{filename}, char *@var{buffer}, size_t @var{size})

@file{unistd.h} (BSD):  @ref{Symbolic Links}.

@comment __realloc_hook
@item __realloc_hook

@file{malloc.h} (GNU):  @ref{Hooks for Malloc}.

@comment realloc
@item void * realloc (void *@var{ptr}, size_t @var{newsize})

@file{malloc.h}, @file{stdlib.h} (ANSI):  @ref{Changing Block Size}.

@comment recvfrom
@item int recvfrom (int @var{socket}, void *@var{buffer}, size_t @var{size}, int @var{flags}, struct sockaddr *@var{addr}, size_t *@var{length-ptr})

@file{sys/socket.h} (BSD):  @ref{Receiving Datagrams}.

@comment recv
@item int recv (int @var{socket}, void *@var{buffer}, size_t @var{size}, int @var{flags})

@file{sys/socket.h} (BSD):  @ref{Receiving Data}.

@comment recvmsg
@item int recvmsg (int @var{socket}, struct msghdr *@var{message}, int @var{flags})

@file{sys/socket.h} (BSD):  @ref{Receiving Datagrams}.

@comment RE_DUP_MAX
@item int RE_DUP_MAX

@file{limits.h} (POSIX.2):  @ref{General Limits}.

@comment REG_BADBR
@item REG_BADBR

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_BADPAT
@item REG_BADPAT

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_BADRPT
@item REG_BADRPT

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment regcomp
@item int regcomp (regex_t *@var{compiled}, const char *@var{pattern}, int @var{cflags})

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_EBRACE
@item REG_EBRACE

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_EBRACK
@item REG_EBRACK

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_ECOLLATE
@item REG_ECOLLATE

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_ECTYPE
@item REG_ECTYPE

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_EESCAPE
@item REG_EESCAPE

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_EPAREN
@item REG_EPAREN

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_ERANGE
@item REG_ERANGE

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment regerror
@item size_t regerror (int @var{errcode}, regex_t *@var{compiled}, char *@var{buffer}, size_t @var{length})

@file{regex.h} (POSIX.2):  @ref{Regexp Cleanup}.

@comment REG_ESPACE
@item REG_ESPACE

@file{regex.h} (POSIX.2):  @ref{Matching POSIX Regexps}.

@comment REG_ESPACE
@item REG_ESPACE

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_ESUBREG
@item REG_ESUBREG

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment regexec
@item int regexec (regex_t *@var{compiled}, char *@var{string}, size_t @var{nmatch}, regmatch_t @var{matchptr} @t{[]}, int @var{eflags})

@file{regex.h} (POSIX.2):  @ref{Matching POSIX Regexps}.

@comment REG_EXTENDED
@item REG_EXTENDED

@file{regex.h} (POSIX.2):  @ref{Flags for POSIX Regexps}.

@comment regex_t
@item regex_t

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment regfree
@item void regfree (regex_t *@var{compiled})

@file{regex.h} (POSIX.2):  @ref{Regexp Cleanup}.

@comment REG_ICASE
@item REG_ICASE

@file{regex.h} (POSIX.2):  @ref{Flags for POSIX Regexps}.

@comment register_printf_function
@item int register_printf_function (int @var{spec}, printf_function @var{handler-function}, printf_arginfo_function @var{arginfo-function})

@file{printf.h} (GNU):  @ref{Registering New Conversions}.

@comment regmatch_t
@item regmatch_t

@file{regex.h} (POSIX.2):  @ref{Regexp Subexpressions}.

@comment REG_NEWLINE
@item REG_NEWLINE

@file{regex.h} (POSIX.2):  @ref{Flags for POSIX Regexps}.

@comment REG_NOMATCH
@item REG_NOMATCH

@file{regex.h} (POSIX.2):  @ref{Matching POSIX Regexps}.

@comment REG_NOSUB
@item REG_NOSUB

@file{regex.h} (POSIX.2):  @ref{Flags for POSIX Regexps}.

@comment REG_NOTBOL
@item REG_NOTBOL

@file{regex.h} (POSIX.2):  @ref{Matching POSIX Regexps}.

@comment REG_NOTEOL
@item REG_NOTEOL

@file{regex.h} (POSIX.2):  @ref{Matching POSIX Regexps}.

@comment regoff_t
@item regoff_t

@file{regex.h} (POSIX.2):  @ref{Regexp Subexpressions}.

@comment remove
@item int remove (const char *@var{filename})

@file{stdio.h} (ANSI):  @ref{Deleting Files}.

@comment rename
@item int rename (const char *@var{oldname}, const char *@var{newname})

@file{stdio.h} (ANSI):  @ref{Renaming Files}.

@comment rewinddir
@item void rewinddir (DIR *@var{dirstream})

@file{dirent.h} (POSIX.1):  @ref{Random Access Directory}.

@comment rewind
@item void rewind (FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{File Positioning}.

@comment rindex
@item char * rindex (const char *@var{string}, int @var{c})

@file{string.h} (BSD):  @ref{Search Functions,}.

@comment rint
@item double rint (double @var{x})

@file{math.h} (BSD):  @ref{Rounding and Remainders}.

@comment RLIMIT_CORE
@item RLIMIT_CORE

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_CPU
@item RLIMIT_CPU

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_DATA
@item RLIMIT_DATA

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_FSIZE
@item RLIMIT_FSIZE

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_MEMLOCK
@item RLIMIT_MEMLOCK

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_NOFILE
@item RLIMIT_NOFILE

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_NPROC
@item RLIMIT_NPROC

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_RSS
@item RLIMIT_RSS

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_STACK
@item RLIMIT_STACK

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIM_NLIMITS
@item RLIM_NLIMITS

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment rmdir
@item int rmdir (const char *@var{filename})

@file{unistd.h} (POSIX.1):  @ref{Deleting Files}.

@comment R_OK
@item int R_OK

@file{unistd.h} (POSIX.1):  @ref{Testing File Access}.

@comment r_re_alloc
@item void * r_re_alloc (void **@var{handleptr}, size_t @var{size})

@file{malloc.h} (GNU):  @ref{Using Relocator}.

@comment RUSAGE_CHILDREN
@item RUSAGE_CHILDREN

@file{sys/resource.h} (BSD):  @ref{Resource Usage}.

@comment RUSAGE_SELF
@item RUSAGE_SELF

@file{sys/resource.h} (BSD):  @ref{Resource Usage}.

@comment SA_NOCLDSTOP
@item int SA_NOCLDSTOP

@file{signal.h} (POSIX.1):  @ref{Flags for Sigaction}.

@comment SA_ONSTACK
@item int SA_ONSTACK

@file{signal.h} (BSD):  @ref{Flags for Sigaction}.

@comment SA_RESTART
@item int SA_RESTART

@file{signal.h} (BSD):  @ref{Flags for Sigaction}.

@comment _SC_2_C_DEV
@item _SC_2_C_DEV

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_2_FORT_DEV
@item _SC_2_FORT_DEV

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_2_FORT_RUN
@item _SC_2_FORT_RUN

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_2_LOCALEDEF
@item _SC_2_LOCALEDEF

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_2_SW_DEV
@item _SC_2_SW_DEV

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_2_VERSION
@item _SC_2_VERSION

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment scalb
@item double scalb (double @var{value}, int @var{exponent})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment scanf
@item int scanf (const char *@var{template}, @dots{})

@file{stdio.h} (ANSI):  @ref{Formatted Input Functions}.

@comment _SC_ARG_MAX
@item _SC_ARG_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_BC_BASE_MAX
@item _SC_BC_BASE_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_BC_DIM_MAX
@item _SC_BC_DIM_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_BC_SCALE_MAX
@item _SC_BC_SCALE_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_BC_STRING_MAX
@item _SC_BC_STRING_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_CHILD_MAX
@item _SC_CHILD_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_CLK_TCK
@item _SC_CLK_TCK

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_COLL_WEIGHTS_MAX
@item _SC_COLL_WEIGHTS_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_EQUIV_CLASS_MAX
@item _SC_EQUIV_CLASS_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_EXPR_NEST_MAX
@item _SC_EXPR_NEST_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment SCHAR_MAX
@item SCHAR_MAX

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment SCHAR_MIN
@item SCHAR_MIN

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment _SC_JOB_CONTROL
@item _SC_JOB_CONTROL

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_LINE_MAX
@item _SC_LINE_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_NGROUPS_MAX
@item _SC_NGROUPS_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_OPEN_MAX
@item _SC_OPEN_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_PAGESIZE
@item _SC_PAGESIZE

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_SAVED_IDS
@item _SC_SAVED_IDS

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_STREAM_MAX
@item _SC_STREAM_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_TZNAME_MAX
@item _SC_TZNAME_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_VERSION
@item _SC_VERSION

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_VERSION
@item _SC_VERSION

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment SEEK_CUR
@item int SEEK_CUR

@file{stdio.h} (ANSI):  @ref{File Positioning}.

@comment seekdir
@item void seekdir (DIR *@var{dirstream}, off_t @var{pos})

@file{dirent.h} (BSD):  @ref{Random Access Directory}.

@comment SEEK_END
@item int SEEK_END

@file{stdio.h} (ANSI):  @ref{File Positioning}.

@comment SEEK_SET
@item int SEEK_SET

@file{stdio.h} (ANSI):  @ref{File Positioning}.

@comment select
@item int select (int @var{nfds}, fd_set *@var{read-fds}, fd_set *@var{write-fds}, fd_set *@var{except-fds}, struct timeval *@var{timeout})

@file{sys/types.h} (BSD):  @ref{Waiting for I/O}.

@comment send
@item int send (int @var{socket}, void *@var{buffer}, size_t @var{size}, int @var{flags})

@file{sys/socket.h} (BSD):  @ref{Sending Data}.

@comment sendmsg
@item int sendmsg (int @var{socket}, const struct msghdr *@var{message}, int @var{flags})

@file{sys/socket.h} (BSD):  @ref{Receiving Datagrams}.

@comment sendto
@item int sendto (int @var{socket}, void *@var{buffer}. size_t @var{size}, int @var{flags}, struct sockaddr *@var{addr}, size_t @var{length})

@file{sys/socket.h} (BSD):  @ref{Sending Datagrams}.

@comment setbuffer
@item void setbuffer (FILE *@var{stream}, char *@var{buf}, size_t @var{size})

@file{stdio.h} (BSD):  @ref{Controlling Buffering}.

@comment setbuf
@item void setbuf (FILE *@var{stream}, char *@var{buf})

@file{stdio.h} (ANSI):  @ref{Controlling Buffering}.

@comment setgid
@item int setgid (gid_t @var{newgid})

@file{unistd.h} (POSIX.1):  @ref{Setting Groups}.

@comment setgrent
@item void setgrent (void)

@file{grp.h} (SVID, BSD):  @ref{Scanning All Groups}.

@comment setgroups
@item int setgroups (size_t @var{count}, gid_t *@var{groups})

@file{grp.h} (BSD):  @ref{Setting Groups}.

@comment sethostent
@item void sethostent (int @var{stayopen})

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment sethostid
@item int sethostid (long int @var{id})

@file{unistd.h} (BSD):  @ref{Host Identification}.

@comment sethostname
@item int sethostname (const char *@var{name}, size_t @var{length})

@file{unistd.h} (BSD):  @ref{Host Identification}.

@comment setitimer
@item int setitimer (int @var{which}, struct itimerval *@var{new}, struct itimerval *@var{old})

@file{sys/time.h} (BSD):  @ref{Setting an Alarm}.

@comment setjmp
@item int setjmp (jmp_buf @var{state})

@file{setjmp.h} (ANSI):  @ref{Non-Local Details,}.

@comment setlinebuf
@item void setlinebuf (FILE *@var{stream})

@file{stdio.h} (BSD):  @ref{Controlling Buffering}.

@comment setlocale
@item char * setlocale (int @var{category}, const char *@var{locale})

@file{locale.h} (ANSI):  @ref{Setting the Locale,}.

@comment setnetent
@item void setnetent (int @var{stayopen})

@file{netdb.h} (BSD):  @ref{Networks Database}.

@comment setpgid
@item int setpgid (pid_t @var{pid}, pid_t @var{pgid})

@file{unistd.h} (POSIX.1):  @ref{Process Group Functions,}.

@comment setpgrp
@item int setpgrp (pid_t @var{pid}, pid_t @var{pgid})

@file{unistd.h} (BSD):  @ref{Process Group Functions,}.

@comment setpriority
@item int setpriority (int @var{class}, int @var{id}, int @var{priority})

@file{sys/resource.h} (BSD):  @ref{Priority}.

@comment setprotoent
@item void setprotoent (int @var{stayopen})

@file{netdb.h} (BSD):  @ref{Protocols Database}.

@comment setpwent
@item void setpwent (void)

@file{pwd.h} (SVID, BSD):  @ref{Scanning All Users}.

@comment setregid
@item int setregid (gid_t @var{rgid}, fid_t @var{egid})

@file{unistd.h} (BSD):  @ref{Setting Groups}.

@comment setreuid
@item int setreuid (uid_t @var{ruid}, uid_t @var{euid})

@file{unistd.h} (BSD):  @ref{Setting User ID}.

@comment setrlimit
@item int setrlimit (int @var{resource}, struct rlimit *@var{rlp})

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment setservent
@item void setservent (int @var{stayopen})

@file{netdb.h} (BSD):  @ref{Services Database}.

@comment setsid
@item pid_t setsid (void)

@file{unistd.h} (POSIX.1):  @ref{Process Group Functions,}.

@comment setsockopt
@item int setsockopt (int @var{socket}, int @var{level}, int @var{optname}, void *@var{optval}, size_t @var{optlen})

@file{sys/socket.h} (BSD):  @ref{Socket Option Functions}.

@comment setstate
@item void * setstate (void *@var{state})

@file{stdlib.h} (BSD):  @ref{BSD Random}.

@comment settimeofday
@item int settimeofday (const struct timeval *@var{tp}, const struct timezone *@var{tzp})

@file{sys/time.h} (BSD):  @ref{High-Resolution Calendar}.

@comment setuid
@item int setuid (uid_t @var{newuid})

@file{unistd.h} (POSIX.1):  @ref{Setting User ID}.

@comment setvbuf
@item int setvbuf (FILE *@var{stream}, char *@var{buf}, int @var{mode}, size_t @var{size})

@file{stdio.h} (ANSI):  @ref{Controlling Buffering}.

@comment SHRT_MAX
@item SHRT_MAX

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment SHRT_MIN
@item SHRT_MIN

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment shutdown
@item int shutdown (int @var{socket}, int @var{how})

@file{sys/socket.h} (BSD):  @ref{Closing a Socket}.

@comment S_IEXEC
@item S_IEXEC

@file{sys/stat.h} (BSD):  @ref{Permission Bits}.

@comment S_IFBLK
@item S_IFBLK

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IFCHR
@item S_IFCHR

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IFDIR
@item S_IFDIR

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IFIFO
@item S_IFIFO

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IFLNK
@item S_IFLNK

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IFMT
@item int S_IFMT

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IFREG
@item S_IFREG

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IFSOCK
@item S_IFSOCK

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment SIGABRT
@item int SIGABRT

@file{signal.h} (ANSI):  @ref{Program Error Signals}.

@comment sigaction
@item int sigaction (int @var{signum}, const struct sigaction *@var{action}, struct sigaction *@var{old-action})

@file{signal.h} (POSIX.1):  @ref{Advanced Signal Handling}.

@comment sigaddset
@item int sigaddset (sigset_t *@var{set}, int @var{signum})

@file{signal.h} (POSIX.1):  @ref{Signal Sets}.

@comment SIGALRM
@item int SIGALRM

@file{signal.h} (POSIX.1):  @ref{Alarm Signals}.

@comment sigaltstack
@item int sigaltstack (const struct sigaltstack *@var{stack}, struct sigaltstack *@var{oldstack})

@file{signal.h} (BSD):  @ref{Signal Stack}.

@comment sig_atomic_t
@item sig_atomic_t

@file{signal.h} (ANSI):  @ref{Atomic Types}.

@comment sigblock
@item int sigblock (int @var{mask})

@file{signal.h} (BSD):  @ref{Blocking in BSD}.

@comment SIG_BLOCK
@item SIG_BLOCK

@file{signal.h} (POSIX.1):  @ref{Process Signal Mask}.

@comment SIGBUS
@item int SIGBUS

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment SIGCHLD
@item int SIGCHLD

@file{signal.h} (POSIX.1):  @ref{Job Control Signals}.

@comment SIGCLD
@item int SIGCLD

@file{signal.h} (SVID):  @ref{Job Control Signals}.

@comment SIGCONT
@item int SIGCONT

@file{signal.h} (POSIX.1):  @ref{Job Control Signals}.

@comment sigdelset
@item int sigdelset (sigset_t *@var{set}, int @var{signum})

@file{signal.h} (POSIX.1):  @ref{Signal Sets}.

@comment sigemptyset
@item int sigemptyset (sigset_t *@var{set})

@file{signal.h} (POSIX.1):  @ref{Signal Sets}.

@comment SIGEMT
@item int SIGEMT

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment SIG_ERR
@item sighandler_t SIG_ERR

@file{signal.h} (ANSI):  @ref{Basic Signal Handling}.

@comment sigfillset
@item int sigfillset (sigset_t *@var{set})

@file{signal.h} (POSIX.1):  @ref{Signal Sets}.

@comment SIGFPE
@item int SIGFPE

@file{signal.h} (ANSI):  @ref{Program Error Signals}.

@comment sighandler_t
@item sighandler_t

@file{signal.h} (GNU):  @ref{Basic Signal Handling}.

@comment SIGHUP
@item int SIGHUP

@file{signal.h} (POSIX.1):  @ref{Termination Signals}.

@comment SIGILL
@item int SIGILL

@file{signal.h} (ANSI):  @ref{Program Error Signals}.

@comment SIGINFO
@item int SIGINFO

@file{signal.h} (BSD):  @ref{Miscellaneous Signals}.

@comment siginterrupt
@item int siginterrupt (int @var{signum}, int @var{failflag})

@file{signal.h} (BSD):  @ref{BSD Handler}.

@comment SIGINT
@item int SIGINT

@file{signal.h} (ANSI):  @ref{Termination Signals}.

@comment SIGIO
@item int SIGIO

@file{signal.h} (BSD):  @ref{Asynchronous I/O Signals}.

@comment SIGIOT
@item int SIGIOT

@file{signal.h} (Unix):  @ref{Program Error Signals}.

@comment sigismember
@item int sigismember (const sigset_t *@var{set}, int @var{signum})

@file{signal.h} (POSIX.1):  @ref{Signal Sets}.

@comment sigjmp_buf
@item sigjmp_buf

@file{setjmp.h} (POSIX.1):  @ref{Non-Local Exits and Signals,,}.

@comment SIGKILL
@item int SIGKILL

@file{signal.h} (POSIX.1):  @ref{Termination Signals}.

@comment siglongjmp
@item void siglongjmp (sigjmp_buf @var{state}, int @var{value})

@file{setjmp.h} (POSIX.1):  @ref{Non-Local Exits and Signals,,}.

@comment SIGLOST
@item int SIGLOST

@file{signal.h} (GNU):  @ref{Operation Error Signals}.

@comment sigmask
@item int sigmask (int @var{signum})

@file{signal.h} (BSD):  @ref{Blocking in BSD}.

@comment signal
@item sighandler_t signal (int @var{signum}, sighandler_t @var{action})

@file{signal.h} (ANSI):  @ref{Basic Signal Handling}.

@comment sigpause
@item int sigpause (int @var{mask})

@file{signal.h} (BSD):  @ref{Blocking in BSD}.

@comment sigpending
@item int sigpending (sigset_t *@var{set})

@file{signal.h} (POSIX.1):  @ref{Checking for Pending Signals}.

@comment SIGPIPE
@item int SIGPIPE

@file{signal.h} (POSIX.1):  @ref{Operation Error Signals}.

@comment SIGPOLL
@item int SIGPOLL

@file{signal.h} (SVID):  @ref{Asynchronous I/O Signals}.

@comment sigprocmask
@item int sigprocmask (int @var{how}, const sigset_t *@var{set}, sigset_t *@var{oldset})

@file{signal.h} (POSIX.1):  @ref{Process Signal Mask}.

@comment SIGPROF
@item int SIGPROF

@file{signal.h} (BSD):  @ref{Alarm Signals}.

@comment SIGQUIT
@item int SIGQUIT

@file{signal.h} (POSIX.1):  @ref{Termination Signals}.

@comment SIGSEGV
@item int SIGSEGV

@file{signal.h} (ANSI):  @ref{Program Error Signals}.

@comment sigsetjmp
@item int sigsetjmp (sigjmp_buf @var{state}, int @var{savesigs})

@file{setjmp.h} (POSIX.1):  @ref{Non-Local Exits and Signals,,}.

@comment sigsetmask
@item int sigsetmask (int @var{mask})

@file{signal.h} (BSD):  @ref{Blocking in BSD}.

@comment SIG_SETMASK
@item SIG_SETMASK

@file{signal.h} (POSIX.1):  @ref{Process Signal Mask}.

@comment sigset_t
@item sigset_t

@file{signal.h} (POSIX.1):  @ref{Signal Sets}.

@comment sigstack
@item int sigstack (const struct sigstack *@var{stack}, struct sigstack *@var{oldstack})

@file{signal.h} (BSD):  @ref{Signal Stack}.

@comment SIGSTOP
@item int SIGSTOP

@file{signal.h} (POSIX.1):  @ref{Job Control Signals}.

@comment sigsuspend
@item int sigsuspend (const sigset_t *@var{set})

@file{signal.h} (POSIX.1):  @ref{Sigsuspend}.

@comment SIGSYS
@item int SIGSYS

@file{signal.h} (Unix):  @ref{Program Error Signals}.

@comment SIGTERM
@item int SIGTERM

@file{signal.h} (ANSI):  @ref{Termination Signals}.

@comment SIGTRAP
@item int SIGTRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment SIGTSTP
@item int SIGTSTP

@file{signal.h} (POSIX.1):  @ref{Job Control Signals}.

@comment SIGTTIN
@item int SIGTTIN

@file{signal.h} (POSIX.1):  @ref{Job Control Signals}.

@comment SIGTTOU
@item int SIGTTOU

@file{signal.h} (POSIX.1):  @ref{Job Control Signals}.

@comment SIG_UNBLOCK
@item SIG_UNBLOCK

@file{signal.h} (POSIX.1):  @ref{Process Signal Mask}.

@comment SIGURG
@item int SIGURG

@file{signal.h} (BSD):  @ref{Asynchronous I/O Signals}.

@comment SIGUSR1
@item int SIGUSR1

@file{signal.h} (POSIX.1):  @ref{Miscellaneous Signals}.

@comment SIGUSR2
@item int SIGUSR2

@file{signal.h} (POSIX.1):  @ref{Miscellaneous Signals}.

@comment sigvec
@item int sigvec (int @var{signum}, const struct sigvec *@var{action},struct sigvec *@var{old-action})

@file{signal.h} (BSD):  @ref{BSD Handler}.

@comment SIGVTALRM
@item int SIGVTALRM

@file{signal.h} (BSD):  @ref{Alarm Signals}.

@comment SIGWINCH
@item int SIGWINCH

@file{signal.h} (BSD):  @ref{Miscellaneous Signals}.

@comment SIGXCPU
@item int SIGXCPU

@file{signal.h} (BSD):  @ref{Operation Error Signals}.

@comment SIGXFSZ
@item int SIGXFSZ

@file{signal.h} (BSD):  @ref{Operation Error Signals}.

@comment sinh
@item double sinh (double @var{x})

@file{math.h} (ANSI):  @ref{Hyperbolic Functions}.

@comment sin
@item double sin (double @var{x})

@file{math.h} (ANSI):  @ref{Trig Functions}.

@comment S_IREAD
@item S_IREAD

@file{sys/stat.h} (BSD):  @ref{Permission Bits}.

@comment S_IRGRP
@item S_IRGRP

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IROTH
@item S_IROTH

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IRUSR
@item S_IRUSR

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IRWXG
@item S_IRWXG

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IRWXO
@item S_IRWXO

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IRWXU
@item S_IRWXU

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_ISBLK
@item int S_ISBLK (mode_t @var{m})

@file{sys/stat.h} (POSIX):  @ref{Testing File Type}.

@comment S_ISCHR
@item int S_ISCHR (mode_t @var{m})

@file{sys/stat.h} (POSIX):  @ref{Testing File Type}.

@comment S_ISDIR
@item int S_ISDIR (mode_t @var{m})

@file{sys/stat.h} (POSIX):  @ref{Testing File Type}.

@comment S_ISFIFO
@item int S_ISFIFO (mode_t @var{m})

@file{sys/stat.h} (POSIX):  @ref{Testing File Type}.

@comment S_ISGID
@item S_ISGID

@file{sys/stat.h} (POSIX):  @ref{Permission Bits}.

@comment S_ISLNK
@item int S_ISLNK (mode_t @var{m})

@file{sys/stat.h} (GNU):  @ref{Testing File Type}.

@comment S_ISREG
@item int S_ISREG (mode_t @var{m})

@file{sys/stat.h} (POSIX):  @ref{Testing File Type}.

@comment S_ISSOCK
@item int S_ISSOCK (mode_t @var{m})

@file{sys/stat.h} (GNU):  @ref{Testing File Type}.

@comment S_ISUID
@item S_ISUID

@file{sys/stat.h} (POSIX):  @ref{Permission Bits}.

@comment S_ISVTX
@item S_ISVTX

@file{sys/stat.h} (BSD):  @ref{Permission Bits}.

@comment S_IWGRP
@item S_IWGRP

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IWOTH
@item S_IWOTH

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IWRITE
@item S_IWRITE

@file{sys/stat.h} (BSD):  @ref{Permission Bits}.

@comment S_IWUSR
@item S_IWUSR

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IXGRP
@item S_IXGRP

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IXOTH
@item S_IXOTH

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IXUSR
@item S_IXUSR

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment size_t
@item size_t

@file{stddef.h} (ANSI):  @ref{Important Data Types}.

@comment sleep
@item unsigned int sleep (unsigned int @var{seconds})

@file{unistd.h} (POSIX.1):  @ref{Sleeping}.

@comment snprintf
@item int snprintf (char *@var{s}, size_t @var{size}, const char *@var{template}, @dots{})

@file{stdio.h} (GNU):  @ref{Formatted Output Functions}.

@comment SO_BROADCAST
@item SO_BROADCAST

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SOCK_DGRAM
@item int SOCK_DGRAM

@file{sys/socket.h} (BSD):  @ref{Communication Styles}.

@comment socket
@item int socket (int @var{namespace}, int @var{style}, int @var{protocol})

@file{sys/socket.h} (BSD):  @ref{Creating a Socket}.

@comment socketpair
@item int socketpair (int @var{namespace}, int @var{style}, int @var{protocol}, int @var{filedes}@t{[2]})

@file{sys/socket.h} (BSD):  @ref{Socket Pairs}.

@comment SOCK_RAW
@item int SOCK_RAW

@file{sys/socket.h} (BSD):  @ref{Communication Styles}.

@comment SOCK_RDM
@item int SOCK_RDM

@file{sys/socket.h} (BSD):  @ref{Communication Styles}.

@comment SOCK_SEQPACKET
@item int SOCK_SEQPACKET

@file{sys/socket.h} (BSD):  @ref{Communication Styles}.

@comment SOCK_STREAM
@item int SOCK_STREAM

@file{sys/socket.h} (BSD):  @ref{Communication Styles}.

@comment SO_DEBUG
@item SO_DEBUG

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_DONTROUTE
@item SO_DONTROUTE

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_ERROR
@item SO_ERROR

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_KEEPALIVE
@item SO_KEEPALIVE

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_LINGER
@item SO_LINGER

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SOL_SOCKET
@item int SOL_SOCKET

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_OOBINLINE
@item SO_OOBINLINE

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_RCVBUF
@item SO_RCVBUF

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_REUSEADDR
@item SO_REUSEADDR

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_SNDBUF
@item SO_SNDBUF

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_STYLE
@item SO_STYLE

@file{sys/socket.h} (GNU):  @ref{Socket-Level Options}.

@comment SO_TYPE
@item SO_TYPE

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment speed_t
@item speed_t

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment sprintf
@item int sprintf (char *@var{s}, const char *@var{template}, @dots{})

@file{stdio.h} (ANSI):  @ref{Formatted Output Functions}.

@comment sqrt
@item double sqrt (double @var{x})

@file{math.h} (ANSI):  @ref{Exponents and Logarithms}.

@comment srand
@item void srand (unsigned int @var{seed})

@file{stdlib.h} (ANSI):  @ref{ANSI Random}.

@comment srandom
@item void srandom (unsigned int @var{seed})

@file{stdlib.h} (BSD):  @ref{BSD Random}.

@comment sscanf
@item int sscanf (const char *@var{s}, const char *@var{template}, @dots{})

@file{stdio.h} (ANSI):  @ref{Formatted Input Functions}.

@comment ssignal
@item sighandler_t ssignal (int @var{signum}, sighandler_t @var{action})

@file{signal.h} (SVID):  @ref{Basic Signal Handling}.

@comment SSIZE_MAX
@item int SSIZE_MAX

@file{limits.h} (POSIX.1):  @ref{General Limits}.

@comment ssize_t
@item ssize_t

@file{unistd.h} (POSIX.1):  @ref{I/O Primitives}.

@comment stat
@item int stat (const char *@var{filename}, struct stat *@var{buf})

@file{sys/stat.h} (POSIX.1):  @ref{Reading Attributes}.

@comment STDERR_FILENO
@item STDERR_FILENO

@file{unistd.h} (POSIX.1):  @ref{Descriptors and Streams}.

@comment stderr
@item FILE * stderr

@file{stdio.h} (ANSI):  @ref{Standard Streams}.

@comment STDIN_FILENO
@item STDIN_FILENO

@file{unistd.h} (POSIX.1):  @ref{Descriptors and Streams}.

@comment stdin
@item FILE * stdin

@file{stdio.h} (ANSI):  @ref{Standard Streams}.

@comment STDOUT_FILENO
@item STDOUT_FILENO

@file{unistd.h} (POSIX.1):  @ref{Descriptors and Streams}.

@comment stdout
@item FILE * stdout

@file{stdio.h} (ANSI):  @ref{Standard Streams}.

@comment stpcpy
@item char * stpcpy (char *@var{to}, const char *@var{from})

@file{string.h} (Unknown origin):  @ref{Copying and Concatenation,}.

@comment strcasecmp
@item int strcasecmp (const char *@var{s1}, const char *@var{s2})

@file{string.h} (BSD):  @ref{String/Array Comparison,}.

@comment strcat
@item char * strcat (char *@var{to}, const char *@var{from})

@file{string.h} (ANSI):  @ref{Copying and Concatenation,}.

@comment strchr
@item char * strchr (const char *@var{string}, int @var{c})

@file{string.h} (ANSI):  @ref{Search Functions,}.

@comment strcmp
@item int strcmp (const char *@var{s1}, const char *@var{s2})

@file{string.h} (ANSI):  @ref{String/Array Comparison,}.

@comment strcoll
@item int strcoll (const char *@var{s1}, const char *@var{s2})

@file{string.h} (ANSI):  @ref{Collation Functions,}.

@comment strcpy
@item char * strcpy (char *@var{to}, const char *@var{from})

@file{string.h} (ANSI):  @ref{Copying and Concatenation,}.

@comment strcspn
@item size_t strcspn (const char *@var{string}, const char *@var{stopset})

@file{string.h} (ANSI):  @ref{Search Functions,}.

@comment strdup
@item char * strdup (const char *@var{s})

@file{string.h} (SVID):  @ref{Copying and Concatenation,}.

@comment STREAM_MAX
@item int STREAM_MAX

@file{limits.h} (POSIX.1):  @ref{General Limits}.

@comment strerror
@item char * strerror (int @var{errnum})

@file{string.h} (ANSI):  @ref{Error Messages,}.

@comment strftime
@item size_t strftime (char *@var{s}, size_t @var{size}, const char *@var{template}, const struct tm *@var{brokentime})

@file{time.h} (ANSI):  @ref{Formatting Date and Time}.

@comment strlen
@item size_t strlen (const char *@var{s})

@file{string.h} (ANSI):  @ref{String Length,}.

@comment strncasecmp
@item int strncasecmp (const char *@var{s1}, const char *@var{s2}, size_t @var{n})

@file{string.h} (BSD):  @ref{String/Array Comparison,}.

@comment strncat
@item char * strncat (char *@var{to}, const char *@var{from}, size_t @var{size})

@file{string.h} (ANSI):  @ref{Copying and Concatenation,}.

@comment strncmp
@item int strncmp (const char *@var{s1}, const char *@var{s2}, size_t @var{size})

@file{string.h} (ANSI):  @ref{String/Array Comparison,}.

@comment strncpy
@item char * strncpy (char *@var{to}, const char *@var{from}, size_t @var{size})

@file{string.h} (ANSI):  @ref{Copying and Concatenation,}.

@comment strpbrk
@item char * strpbrk (const char *@var{string}, const char *@var{stopset})

@file{string.h} (ANSI):  @ref{Search Functions,}.

@comment strrchr
@item char * strrchr (const char *@var{string}, int @var{c})

@file{string.h} (ANSI):  @ref{Search Functions,}.

@comment strsignal
@item char * strsignal (int @var{signum})

@file{string.h} (GNU):  @ref{Signal Messages}.

@comment strspn
@item size_t strspn (const char *@var{string}, const char *@var{skipset})

@file{string.h} (ANSI):  @ref{Search Functions,}.

@comment strstr
@item char * strstr (const char *@var{haystack}, const char *@var{needle})

@file{string.h} (ANSI):  @ref{Search Functions,}.

@comment strtod
@item double strtod (const char *@var{string}, char **@var{tailptr})

@file{stdlib.h} (ANSI):  @ref{Parsing of Floats}.

@comment strtok
@item char * strtok (char *@var{newstring}, const char *@var{delimiters})

@file{string.h} (ANSI):  @ref{Finding Tokens in a String,}.

@comment strtol
@item long int strtol (const char *@var{string}, char **@var{tailptr}, int @var{base})

@file{stdlib.h} (ANSI):  @ref{Parsing of Integers}.

@comment strtoul
@item unsigned long int strtoul (const char *@var{string}, char **@var{tailptr}, int @var{base})

@file{stdlib.h} (ANSI):  @ref{Parsing of Integers}.

@comment struct dirent
@item struct dirent

@file{dirent.h} (POSIX.1):  @ref{Directory Entries}.

@comment struct flock
@item struct flock

@file{fcntl.h} (POSIX.1):  @ref{File Locks}.

@comment struct group
@item struct group

@file{grp.h} (POSIX.1):  @ref{Group Data Structure}.

@comment struct hostent
@item struct hostent

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment struct in_addr
@item struct in_addr

@file{netinet/in.h} (BSD):  @ref{Host Address Data Type}.

@comment struct itimerval
@item struct itimerval

@file{sys/time.h} (BSD):  @ref{Setting an Alarm}.

@comment struct lconv
@item struct lconv

@file{locale.h} (ANSI):  @ref{Numeric Formatting,}.

@comment struct linger
@item struct linger

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment struct msghdr
@item struct msghdr

@file{sys/socket.h} (BSD):  @ref{Receiving Datagrams}.

@comment struct mstats
@item struct mstats

@file{malloc.h} (GNU):  @ref{Statistics of Malloc}.

@comment struct netent
@item struct netent

@file{netdb.h} (BSD):  @ref{Networks Database}.

@comment struct obstack
@item struct obstack

@file{obstack.h} (GNU):  @ref{Creating Obstacks}.

@comment struct option
@item struct option

@file{getopt.h} (GNU):  @ref{Long Options}.

@comment struct passwd
@item struct passwd

@file{pwd.h} (POSIX.1):  @ref{User Data Structure}.

@comment struct printf_info
@item struct printf_info

@file{printf.h} (GNU):  @ref{Conversion Specifier Options}.

@comment struct protoent
@item struct protoent

@file{netdb.h} (BSD):  @ref{Protocols Database}.

@comment struct rlimit
@item struct rlimit

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment struct rusage
@item struct rusage

@file{sys/resource.h} (BSD):  @ref{Resource Usage}.

@comment struct servent
@item struct servent

@file{netdb.h} (BSD):  @ref{Services Database}.

@comment struct sigaction
@item struct sigaction

@file{signal.h} (POSIX.1):  @ref{Advanced Signal Handling}.

@comment struct sigaltstack
@item struct sigaltstack

@file{signal.h} (BSD):  @ref{Signal Stack}.

@comment struct sigstack
@item struct sigstack

@file{signal.h} (BSD):  @ref{Signal Stack}.

@comment struct sigvec
@item struct sigvec

@file{signal.h} (BSD):  @ref{BSD Handler}.

@comment struct sockaddr
@item struct sockaddr

@file{sys/socket.h} (BSD):  @ref{Address Formats}.

@comment struct sockaddr_in
@item struct sockaddr_in

@file{netinet/in.h} (BSD):  @ref{Internet Address Format}.

@comment struct sockaddr_un
@item struct sockaddr_un

@file{sys/un.h} (BSD):  @ref{File Namespace Details}.

@comment struct stat
@item struct stat

@file{sys/stat.h} (POSIX.1):  @ref{Attribute Meanings}.

@comment struct termios
@item struct termios

@file{termios.h} (POSIX.1):  @ref{Mode Data Types}.

@comment struct timeval
@item struct timeval

@file{sys/time.h} (BSD):  @ref{High-Resolution Calendar}.

@comment struct timezone
@item struct timezone

@file{sys/time.h} (BSD):  @ref{High-Resolution Calendar}.

@comment struct tm
@item struct tm

@file{time.h} (ANSI):  @ref{Broken-down Time}.

@comment struct tms
@item struct tms

@file{sys/times.h} (POSIX.1):  @ref{Detailed CPU Time}.

@comment struct utimbuf
@item struct utimbuf

@file{time.h} (POSIX.1):  @ref{File Times}.

@comment struct utsname
@item struct utsname

@file{sys/utsname.h} (POSIX.1):  @ref{Hardware/Software Type ID}.

@comment strxfrm
@item size_t strxfrm (char *@var{to}, const char *@var{from}, size_t @var{size})

@file{string.h} (ANSI):  @ref{Collation Functions,}.

@comment _SVID_SOURCE
@item _SVID_SOURCE

(GNU):  @ref{Feature Test Macros}.

@comment SV_INTERRUPT
@item int SV_INTERRUPT

@file{signal.h} (BSD):  @ref{BSD Handler}.

@comment SV_ONSTACK
@item int SV_ONSTACK

@file{signal.h} (BSD):  @ref{BSD Handler}.

@comment SV_RESETHAND
@item int SV_RESETHAND

@file{signal.h} (Sun):  @ref{BSD Handler}.

@comment symlink
@item int symlink (const char *@var{oldname}, const char *@var{newname})

@file{unistd.h} (BSD):  @ref{Symbolic Links}.

@comment sysconf
@item long int sysconf (int @var{parameter})

@file{unistd.h} (POSIX.1):  @ref{Sysconf Definition}.

@comment system
@item int system (const char *@var{command})

@file{stdlib.h} (ANSI):  @ref{Running a Command}.

@comment tanh
@item double tanh (double @var{x})

@file{math.h} (ANSI):  @ref{Hyperbolic Functions}.

@comment tan
@item double tan (double @var{x})

@file{math.h} (ANSI):  @ref{Trig Functions}.

@comment tcdrain
@item int tcdrain (int @var{filedes})

@file{termios.h} (POSIX.1):  @ref{Line Control}.

@comment tcflag_t
@item tcflag_t

@file{termios.h} (POSIX.1):  @ref{Mode Data Types}.

@comment tcflow
@item int tcflow (int @var{filedes}, int @var{action})

@file{termios.h} (POSIX.1):  @ref{Line Control}.

@comment tcflush
@item int tcflush (int @var{filedes}, int @var{queue})

@file{termios.h} (POSIX.1):  @ref{Line Control}.

@comment tcgetattr
@item int tcgetattr (int @var{filedes}, struct termios *@var{termios-p})

@file{termios.h} (POSIX.1):  @ref{Mode Functions}.

@comment tcgetpgrp
@item pid_t tcgetpgrp (int @var{filedes})

@file{unistd.h} (POSIX.1):  @ref{Terminal Access Functions,}.

@comment TCSADRAIN
@item TCSADRAIN

@file{termios.h} (POSIX.1):  @ref{Mode Functions}.

@comment TCSAFLUSH
@item TCSAFLUSH

@file{termios.h} (POSIX.1):  @ref{Mode Functions}.

@comment TCSANOW
@item TCSANOW

@file{termios.h} (POSIX.1):  @ref{Mode Functions}.

@comment TCSASOFT
@item TCSASOFT

@file{termios.h} (BSD):  @ref{Mode Functions}.

@comment tcsendbreak
@item int tcsendbreak (int @var{filedes}, int @var{duration})

@file{termios.h} (POSIX.1):  @ref{Line Control}.

@comment tcsetattr
@item int tcsetattr (int @var{filedes}, int @var{when}, const struct termios *@var{termios-p})

@file{termios.h} (POSIX.1):  @ref{Mode Functions}.

@comment tcsetpgrp
@item int tcsetpgrp (int @var{filedes}, pid_t @var{pgid})

@file{unistd.h} (POSIX.1):  @ref{Terminal Access Functions,}.

@comment telldir
@item off_t telldir (DIR *@var{dirstream})

@file{dirent.h} (BSD):  @ref{Random Access Directory}.

@comment TEMP_FAILURE_RETRY
@item TEMP_FAILURE_RETRY (@var{expression})

@file{unistd.h} (GNU):  @ref{Interrupted Primitives}.

@comment tempnam
@item char * tempnam (const char *@var{dir}, const char *@var{prefix})

@file{stdio.h} (SVID):  @ref{Temporary Files}.

@c This file is generated by summary.awk from the Texinfo sources.
@comment time
@item time_t time (time_t *@var{result})

@file{time.h} (ANSI):  @ref{Simple Calendar Time}.

@comment times
@item clock_t times (struct tms *@var{buffer})

@file{sys/times.h} (POSIX.1):  @ref{Detailed CPU Time}.

@comment time_t
@item time_t

@file{time.h} (ANSI):  @ref{Simple Calendar Time}.

@comment timezone
@item long int timezone

@file{time.h} (SVID):  @ref{Time Zone Functions}.

@comment tmpfile
@item FILE * tmpfile (void)

@file{stdio.h} (ANSI):  @ref{Temporary Files}.

@comment TMP_MAX
@item int TMP_MAX

@file{stdio.h} (ANSI):  @ref{Temporary Files}.

@comment tmpnam
@item char * tmpnam (char *@var{result})

@file{stdio.h} (ANSI):  @ref{Temporary Files}.

@comment toascii
@item int toascii (int @var{c})

@file{ctype.h} (SVID, BSD):  @ref{Case Conversion,}.

@comment tolower
@item int tolower (int @var{c})

@file{ctype.h} (ANSI):  @ref{Case Conversion,}.

@comment _tolower
@item int _tolower (int @var{c})

@file{ctype.h} (SVID):  @ref{Case Conversion,}.

@comment TOSTOP
@item tcflag_t TOSTOP

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment toupper
@item int toupper (int @var{c})

@file{ctype.h} (ANSI):  @ref{Case Conversion,}.

@comment _toupper
@item int _toupper (int @var{c})

@file{ctype.h} (SVID):  @ref{Case Conversion,}.

@comment TRY_AGAIN
@item TRY_AGAIN

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment ttyname
@item char * ttyname (int @var{filedes})

@file{unistd.h} (POSIX.1):  @ref{Is It a Terminal}.

@comment TZNAME_MAX
@item int TZNAME_MAX

@file{limits.h} (POSIX.1):  @ref{General Limits}.

@comment tzset
@item void tzset (void)

@file{time.h} (POSIX.1):  @ref{Time Zone Functions}.

@comment UCHAR_MAX
@item UCHAR_MAX

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment uid_t
@item uid_t

@file{sys/types.h} (POSIX.1):  @ref{Reading Persona}.

@comment UINT_MAX
@item UINT_MAX

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment ULONG_LONG_MAX
@item ULONG_LONG_MAX

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment ULONG_MAX
@item ULONG_MAX

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment umask
@item mode_t umask (mode_t @var{mask})

@file{sys/stat.h} (POSIX.1):  @ref{Setting Permissions}.

@comment uname
@item int uname (struct utsname *@var{info})

@file{sys/utsname.h} (POSIX.1):  @ref{Hardware/Software Type ID}.

@comment ungetc
@item int ungetc (int @var{c}, FILE *@var{stream})

@file{stdio.h} (ANSI):  @ref{How Unread}.

@comment union wait
@item union wait

@file{sys/wait.h} (BSD):  @ref{BSD Wait Functions}.

@comment unlink
@item int unlink (const char *@var{filename})

@file{unistd.h} (POSIX.1):  @ref{Deleting Files}.

@comment USHRT_MAX
@item USHRT_MAX

@file{limits.h} (ANSI):  @ref{Range of Type}.

@comment utime
@item int utime (const char *@var{filename}, const struct utimbuf *@var{times})

@file{time.h} (POSIX.1):  @ref{File Times}.

@comment utimes
@item int utimes (const char *@var{filename}, struct timeval @var{tvp}@t{[2]})

@file{sys/time.h} (BSD):  @ref{File Times}.

@comment va_alist
@item va_alist

@file{varargs.h} (Unix):  @ref{Old Varargs}.

@comment va_arg
@item @var{type} va_arg (va_list @var{ap}, @var{type})

@file{stdarg.h} (ANSI):  @ref{Argument Macros}.

@comment va_dcl
@item va_dcl

@file{varargs.h} (Unix):  @ref{Old Varargs}.

@comment va_end
@item void va_end (va_list @var{ap})

@file{stdarg.h} (ANSI):  @ref{Argument Macros}.

@comment va_list
@item va_list

@file{stdarg.h} (ANSI):  @ref{Argument Macros}.

@comment valloc
@item void * valloc (size_t @var{size})

@file{malloc.h}, @file{stdlib.h} (BSD):  @ref{Aligned Memory Blocks}.

@comment vasprintf
@item int vasprintf (char **@var{ptr}, const char *@var{template}, va_list @var{ap})

@file{stdio.h} (GNU):  @ref{Variable Arguments Output}.

@comment va_start
@item void va_start (va_list @var{ap})

@file{varargs.h} (Unix):  @ref{Old Varargs}.

@comment va_start
@item void va_start (va_list @var{ap}, @var{last-required})

@file{stdarg.h} (ANSI):  @ref{Argument Macros}.

@comment VDISCARD
@item int VDISCARD

@file{termios.h} (BSD):  @ref{Other Special}.

@comment VDSUSP
@item int VDSUSP

@file{termios.h} (BSD):  @ref{Signal Characters}.

@comment VEOF
@item int VEOF

@file{termios.h} (POSIX.1):  @ref{Editing Characters}.

@comment VEOL2
@item int VEOL2

@file{termios.h} (BSD):  @ref{Editing Characters}.

@comment VEOL
@item int VEOL

@file{termios.h} (POSIX.1):  @ref{Editing Characters}.

@comment VERASE
@item int VERASE

@file{termios.h} (POSIX.1):  @ref{Editing Characters}.

@comment vfork
@item pid_t vfork (void)

@file{unistd.h} (BSD):  @ref{Creating a Process}.

@comment vfprintf
@item int vfprintf (FILE *@var{stream}, const char *@var{template}, va_list @var{ap})

@file{stdio.h} (ANSI):  @ref{Variable Arguments Output}.

@comment vfscanf
@item int vfscanf (FILE *@var{stream}, const char *@var{template}, va_list @var{ap})

@file{stdio.h} (GNU):  @ref{Variable Arguments Input}.

@comment VINTR
@item int VINTR

@file{termios.h} (POSIX.1):  @ref{Signal Characters}.

@comment VKILL
@item int VKILL

@file{termios.h} (POSIX.1):  @ref{Editing Characters}.

@comment VLNEXT
@item int VLNEXT

@file{termios.h} (BSD):  @ref{Other Special}.

@comment VMIN
@item int VMIN

@file{termios.h} (POSIX.1):  @ref{Noncanonical Input}.

@comment vprintf
@item int vprintf (const char *@var{template}, va_list @var{ap})

@file{stdio.h} (ANSI):  @ref{Variable Arguments Output}.

@comment VQUIT
@item int VQUIT

@file{termios.h} (POSIX.1):  @ref{Signal Characters}.

@comment VREPRINT
@item int VREPRINT

@file{termios.h} (BSD):  @ref{Editing Characters}.

@comment vscanf
@item int vscanf (const char *@var{template}, va_list @var{ap})

@file{stdio.h} (GNU):  @ref{Variable Arguments Input}.

@comment vsnprintf
@item int vsnprintf (char *@var{s}, size_t @var{size}, const char *@var{template}, va_list @var{ap})

@file{stdio.h} (GNU):  @ref{Variable Arguments Output}.

@comment vsprintf
@item int vsprintf (char *@var{s}, const char *@var{template}, va_list @var{ap})

@file{stdio.h} (ANSI):  @ref{Variable Arguments Output}.

@comment vsscanf
@item int vsscanf (const char *@var{s}, const char *@var{template}, va_list @var{ap})

@file{stdio.h} (GNU):  @ref{Variable Arguments Input}.

@comment VSTART
@item int VSTART

@file{termios.h} (POSIX.1):  @ref{Start/Stop Characters}.

@comment VSTATUS
@item int VSTATUS

@file{termios.h} (BSD):  @ref{Other Special}.

@comment VSTOP
@item int VSTOP

@file{termios.h} (POSIX.1):  @ref{Start/Stop Characters}.

@comment VSUSP
@item int VSUSP

@file{termios.h} (POSIX.1):  @ref{Signal Characters}.

@comment VTIME
@item int VTIME

@file{termios.h} (POSIX.1):  @ref{Noncanonical Input}.

@comment VWERASE
@item int VWERASE

@file{termios.h} (BSD):  @ref{Editing Characters}.

@comment wait3
@item pid_t wait3 (union wait *@var{status-ptr}, int @var{options}, struct rusage *@var{usage})

@file{sys/wait.h} (BSD):  @ref{BSD Wait Functions}.

@comment wait4
@item pid_t wait4 (pid_t @var{pid}, int *@var{status-ptr}, int @var{options}, struct rusage *@var{usage})

@file{sys/wait.h} (BSD):  @ref{Process Completion}.

@comment wait
@item pid_t wait (int *@var{status-ptr})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion}.

@comment waitpid
@item pid_t waitpid (pid_t @var{pid}, int *@var{status-ptr}, int @var{options})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion}.

@comment WCHAR_MAX
@item WCHAR_MAX

@file{limits.h} (GNU):  @ref{Range of Type}.

@comment wchar_t
@item wchar_t

@file{stddef.h} (ANSI):  @ref{Wide Char Intro,}.

@comment WCOREDUMP
@item int WCOREDUMP (int @var{status})

@file{sys/wait.h} (BSD):  @ref{Process Completion Status}.

@comment wcstombs
@item size_t wcstombs (char *@var{string}, const wchar_t @var{wstring}, size_t @var{size})

@file{stdlib.h} (ANSI):  @ref{Wide String Conversion,}.

@comment wctomb
@item int wctomb (char *@var{string}, wchar_t @var{wchar})

@file{stdlib.h} (ANSI):  @ref{Converting One Char,}.

@comment WEXITSTATUS
@item int WEXITSTATUS (int @var{status})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion Status}.

@comment WIFEXITED
@item int WIFEXITED (int @var{status})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion Status}.

@comment WIFSIGNALED
@item int WIFSIGNALED (int @var{status})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion Status}.

@comment WIFSTOPPED
@item int WIFSTOPPED (int @var{status})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion Status}.

@comment W_OK
@item int W_OK

@file{unistd.h} (POSIX.1):  @ref{Testing File Access}.

@comment wordexp
@item int wordexp (const char *@var{words}, wordexp_t *@var{word-vector-ptr}, int @var{flags})

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment wordexp_t
@item wordexp_t

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment wordfree
@item void wordfree (wordexp_t *@var{word-vector-ptr})

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment WRDE_APPEND
@item WRDE_APPEND

@file{wordexp.h} (POSIX.2):  @ref{Flags for Wordexp}.

@comment WRDE_BADCHAR
@item WRDE_BADCHAR

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment WRDE_BADVAL
@item WRDE_BADVAL

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment WRDE_CMDSUB
@item WRDE_CMDSUB

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment WRDE_DOOFFS
@item WRDE_DOOFFS

@file{wordexp.h} (POSIX.2):  @ref{Flags for Wordexp}.

@comment WRDE_NOCMD
@item WRDE_NOCMD

@file{wordexp.h} (POSIX.2):  @ref{Flags for Wordexp}.

@comment WRDE_NOSPACE
@item WRDE_NOSPACE

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment WRDE_REUSE
@item WRDE_REUSE

@file{wordexp.h} (POSIX.2):  @ref{Flags for Wordexp}.

@comment WRDE_SHOWERR
@item WRDE_SHOWERR

@file{wordexp.h} (POSIX.2):  @ref{Flags for Wordexp}.

@comment WRDE_SYNTAX
@item WRDE_SYNTAX

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment WRDE_UNDEF
@item WRDE_UNDEF

@file{wordexp.h} (POSIX.2):  @ref{Flags for Wordexp}.

@comment write
@item ssize_t write (int @var{filedes}, const void *@var{buffer}, size_t @var{size})

@file{unistd.h} (POSIX.1):  @ref{I/O Primitives}.

@comment WSTOPSIG
@item int WSTOPSIG (int @var{status})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion Status}.

@comment WTERMSIG
@item int WTERMSIG (int @var{status})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion Status}.

@comment X_OK
@item int X_OK

@file{unistd.h} (POSIX.1):  @ref{Testing File Access}.

