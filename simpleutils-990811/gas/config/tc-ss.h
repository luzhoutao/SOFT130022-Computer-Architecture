/* tc-ss.h -- header file for tc-ss.c.
   Based on tc-mips.h
   Modified for SimpleScalar by Todd Austin, University of Wisconsin
   Updated by Charles Lefurgy, University of Michigan

   This file is part of GAS.

   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

#ifndef TC_SS

#define TC_SS

#ifdef ANSI_PROTOTYPES
struct frag;
struct expressionS;
#endif

/* Default to big endian.  */
#ifndef TARGET_BYTES_BIG_ENDIAN
#define TARGET_BYTES_BIG_ENDIAN		1
#endif

#define TARGET_ARCH bfd_arch_ss

#define WORKING_DOT_WORD	1
#define OLD_FLOAT_READS
#define REPEAT_CONS_EXPRESSIONS
#define RELOC_EXPANSION_POSSIBLE
#define MAX_RELOC_EXPANSION 3
#define LOCAL_LABELS_FB 1

/* Maximum symbol offset that can be encoded in a BFD_RELOC_MIPS_GPREL
   relocation: */
#define MAX_GPREL_OFFSET (0x7FF4)

#define md_relax_frag(fragp, stretch) ss_relax_frag(fragp, stretch)
extern int ss_relax_frag PARAMS ((struct frag *, long));

#define md_undefined_symbol(name)	(0)
#define md_operand(x)

/* We permit PC relative difference expressions when generating
   embedded PIC code.  */
#define DIFF_EXPR_OK

/* The endianness of the target format may change based on command
   line arguments.  */
#define TARGET_FORMAT ss_target_format()
extern const char *ss_target_format PARAMS ((void));

struct ss_cl_insn
{
  struct _insn_opcode {                                
    unsigned long a;                  /* opcode */     
    unsigned long b;                  /* arguments */  
  } insn_opcode;                                     
  const struct ss_opcode        *insn_mo;              
};

extern int tc_get_register PARAMS ((int frame));

#define tc_init_after_args() ss_init_after_args()
extern void ss_init_after_args PARAMS ((void));

#define md_parse_long_option(arg) ss_parse_long_option (arg)
extern int ss_parse_long_option PARAMS ((const char *));

#define tc_frob_label(sym) ss_define_label (sym)
extern void ss_define_label PARAMS ((symbolS *));

#define tc_frob_file_before_adjust() ss_frob_file_before_adjust ()
extern void ss_frob_file_before_adjust PARAMS ((void));

#define tc_frob_file() ss_frob_file ()
extern void ss_frob_file PARAMS ((void));

#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)
#define tc_frob_file_after_relocs ss_frob_file_after_relocs
extern void ss_frob_file_after_relocs PARAMS ((void));
#endif

#define TC_CONS_FIX_NEW cons_fix_new_ss
extern void cons_fix_new_ss
  PARAMS ((struct frag *, int, unsigned int, struct expressionS *));

#define tc_fix_adjustable(fixp) ss_fix_adjustable (fixp)
extern int ss_fix_adjustable PARAMS ((struct fix *));

/* When generating embedded PIC code we must keep PC relative
   relocations.  */
#define TC_FORCE_RELOCATION(fixp) ss_force_relocation (fixp)
extern int ss_force_relocation PARAMS ((struct fix *));

/* md_apply_fix sets fx_done correctly.  */
#define TC_HANDLE_FX_DONE 1

/* Register mask variables.  These are set by the SS assembly code
   and used by ECOFF and possibly other object file formats.  */
extern unsigned long ss_gprmask;
extern unsigned long ss_cprmask[4];

#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)

#define elf_tc_final_processing ss_elf_final_processing
extern void ss_elf_final_processing PARAMS ((void));

#define ELF_TC_SPECIAL_SECTIONS \
  { ".sdata",	SHT_PROGBITS,	SHF_ALLOC + SHF_WRITE + SHF_MIPS_GPREL	}, \
  { ".sbss",	SHT_NOBITS,	SHF_ALLOC + SHF_WRITE + SHF_MIPS_GPREL	}, \
  { ".lit4",	SHT_PROGBITS,	SHF_ALLOC + SHF_WRITE + SHF_MIPS_GPREL	}, \
  { ".lit8",	SHT_PROGBITS,	SHF_ALLOC + SHF_WRITE + SHF_MIPS_GPREL	}, \
  { ".ucode",	SHT_MIPS_UCODE,	0					}, \
  { ".mdebug",	SHT_MIPS_DEBUG,	0					},
/* Other special sections not generated by the assembler: .reginfo,
   .liblist, .conflict, .gptab, .got, .dynamic, .rel.dyn.  */

#endif

extern void md_ss_end PARAMS ((void));
#define md_end()	md_ss_end()

#define USE_GLOBAL_POINTER_OPT	(OUTPUT_FLAVOR == bfd_target_ecoff_flavour \
				 || OUTPUT_FLAVOR == bfd_target_elf_flavour)

extern void ss_pop_insert PARAMS ((void));
#define md_pop_insert()		ss_pop_insert()

extern void ss_flush_pending_output PARAMS ((void));
#define md_flush_pending_output ss_flush_pending_output

extern void ss_enable_auto_align PARAMS ((void));
#define md_elf_section_change_hook()	ss_enable_auto_align()

#endif /* TC_SS */
